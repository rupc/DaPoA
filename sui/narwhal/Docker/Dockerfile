# Dictates whether the underlying node should be built as a dev or
# production binary. If empty, then the development mode will be built.
# If passed as BUILD_MODE=--release, then the production will be built.
ARG BUILD_MODE="release"

#################################################################
# Stage 0
#################################################################
FROM rust:1.65.0 AS chef
WORKDIR "$WORKDIR/sui"
ARG BUILD_MODE

# Install basic dependencies
RUN apt-get update && apt-get install -y cmake clang

RUN echo "Will build image with mode: ${BUILD_MODE}"

#################################################################
# Stage 1: Planning
#################################################################
FROM chef as planner
ARG BUILD_MODE

# Plan out the 3rd-party dependencies that need to be built.
#
# This is done by:
#   1. Copy in Cargo.toml, Cargo.lock, and the workspace-hack crate
#   2. Removing all workspace crates, other than the workpsace-hack
#      crate, from the workspace Cargo.toml file.
#   3. Update the lockfile in order to reflect the changes to the
#      root Cargo.toml file.
COPY Cargo.toml Cargo.lock ./
COPY crates/workspace-hack crates/workspace-hack
RUN sed -i '/crates\/workspace-hack/b; /crates/d; /narwhal/d' Cargo.toml \
    && cargo metadata -q >/dev/null

#################################################################
# Stage 2 : Caching
#################################################################
# Build and cache all dependencies.
#
# In a fresh layer, copy in the "plan" generated by the planner
# and run `cargo build` in order to create a caching Docker layer
# with all dependencies built.
FROM chef AS builder 
ARG BUILD_MODE
ARG FEATURES="benchmark"

COPY --from=planner /sui/Cargo.toml Cargo.toml
COPY --from=planner /sui/Cargo.lock Cargo.lock
COPY --from=planner /sui/crates/workspace-hack crates/workspace-hack
RUN cargo build --${BUILD_MODE}

#################################################################
# Stage 2.5 : Building
#################################################################
# Copy in the rest of the crates (and an unmodified Cargo.toml and Cargo.lock)
# and build the application. At this point no dependencies should need to be
# built as they were built and cached by the previous layer.

# Copy all the files in the workdir excluding everything
# from the .dockerignore
COPY . .

# Build the binary named "node"
RUN cargo build --${BUILD_MODE} --features ${FEATURES} --bin narwhal-node --bin narwhal-benchmark-client


#################################################################
# Stage 3 : Production image
#################################################################

# Creat another layer so we can re-use caching
FROM debian:bullseye-slim
ARG BUILD_MODE

WORKDIR "$WORKDIR/sui"

# Copy the Narwhal node binary to bin folder
COPY --from=builder sui/target/${BUILD_MODE}/narwhal-node bin/

# This is used for testing a cluster by generating load.
# We use this in our k8s cluster deployed alongside the workers and validators.
COPY --from=builder sui/target/${BUILD_MODE}/narwhal-benchmark-client bin/

# Copy the entry point file
COPY narwhal/Docker/entry.sh ./

# Now add the entry point
CMD ./entry.sh
