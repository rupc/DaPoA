{
  "openrpc": "1.2.6",
  "info": {
    "title": "Sui JSON-RPC",
    "description": "Sui JSON-RPC API for interaction with Sui Full node.",
    "contact": {
      "name": "Mysten Labs",
      "url": "https://mystenlabs.com",
      "email": "build@mystenlabs.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"
    },
    "version": "0.28.0"
  },
  "methods": [
    {
      "name": "sui_batchTransaction",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned batched transaction.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "single_transaction_params",
          "description": "list of transaction request parameters",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RPCTransactionRequestParams"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "txn_builder_mode",
          "description": "Whether this is a regular transaction or a Dev Inspect Transaction",
          "schema": {
            "$ref": "#/components/schemas/SuiTransactionBuilderMode"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      },
      "examples": [
        {
          "name": "Create unsigned batch transaction data.",
          "params": [
            {
              "name": "signer",
              "value": "0x9b07815f04497e2e05d22cac3aa061410b20868cc619154c42a1c61be9902717"
            },
            {
              "name": "single_transaction_params",
              "value": [
                {
                  "moveCallRequestParams": {
                    "packageObjectId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                    "module": "devnet_nft",
                    "function": "mint",
                    "typeArguments": [],
                    "arguments": [
                      "Example NFT",
                      "An NFT created by the Sui Command Line Tool",
                      "ipfs://bafkreibngqhl3gaa7daob4i2vccziay2jjlp435cf66vhono7nrvww53ty"
                    ]
                  }
                },
                {
                  "transferObjectRequestParams": {
                    "recipient": "0xb24b8ec168fe4896f5b70ccb10f1a705e061d0fdfa189618d28b0d44efef92cb",
                    "objectId": "0x672f0dbe129f1e39113f9f6164ea2867f8deccf3c3c518f146de9554f03f27a8"
                  }
                }
              ]
            },
            {
              "name": "gas",
              "value": "0xf44b581f23222c10916b17a369b4da039d075952b58036f2a7b561446592403c"
            },
            {
              "name": "gas_budget",
              "value": 1000
            },
            {
              "name": "txn_builder_mode",
              "value": "Commit"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "txBytes": "AQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIKZGV2bmV0X25mdARtaW50AAMAC0V4YW1wbGUgTkZUACtBbiBORlQgY3JlYXRlZCBieSB0aGUgU3VpIENvbW1hbmQgTGluZSBUb29sAEJpcGZzOi8vYmFma3JlaWJuZ3FobDNnYWE3ZGFvYjRpMnZjY3ppYXkyampscDQzNWNmNjZ2aG9ubzducnZ3dzUzdHkAskuOwWj+SJb1twzLEPGnBeBh0P36GJYY0osNRO/vkstnLw2+Ep8eORE/n2Fk6ihn+N7M88PFGPFG3pVU8D8nqAEAAAAAAAAAID1bEYXznnHvNX4r2eE5YlFrCkFAMnZDeyXw/76JfPR2mweBXwRJfi4F0iysOqBhQQsghozGGRVMQqHGG+mQJxf0S1gfIyIsEJFrF6NptNoDnQdZUrWANvKntWFEZZJAPAEAAAAAAAAAIMB3fp0kb/OXSsXxs1CqFsQuoNcRezDIyENs56klSzDSmweBXwRJfi4F0iysOqBhQQsghozGGRVMQqHGG+mQJxcBAAAAAAAAAOgDAAAAAAAAAA==",
              "gas": {
                "objectId": "0xf44b581f23222c10916b17a369b4da039d075952b58036f2a7b561446592403c",
                "version": 1,
                "digest": "DxJxf3yJYN74x3saUWa3pxQ2HWETkpwv1pKWHjbZ3n2u"
              },
              "inputObjects": [
                {
                  "MovePackage": "0x0000000000000000000000000000000000000000000000000000000000000002"
                },
                {
                  "ImmOrOwnedMoveObject": {
                    "objectId": "0x672f0dbe129f1e39113f9f6164ea2867f8deccf3c3c518f146de9554f03f27a8",
                    "version": 1,
                    "digest": "58WQqUhrsHbxjkMtiiGtkJfCpBwufnJCDVr88hExPwFs"
                  }
                },
                {
                  "ImmOrOwnedMoveObject": {
                    "objectId": "0xf44b581f23222c10916b17a369b4da039d075952b58036f2a7b561446592403c",
                    "version": 1,
                    "digest": "DxJxf3yJYN74x3saUWa3pxQ2HWETkpwv1pKWHjbZ3n2u"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "sui_devInspectTransaction",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Runs the transaction in dev-inspect mode. Which allows for nearly any transaction (or Move call) with any arguments. Detailed results are provided, including both the transaction effects and any return values.",
      "params": [
        {
          "name": "sender_address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "tx_bytes",
          "description": "BCS encoded TransactionKind(as opposed to TransactionData, which include gasBudget and gasPrice)",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "gas_price",
          "description": "Gas is not charged, but gas usage is still calculated. Default to use reference gas price",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "epoch",
          "description": "The epoch to perform the call. Will be set from the system state object if not provided",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "DevInspectResults",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/DevInspectResults"
        }
      }
    },
    {
      "name": "sui_dryRunTransaction",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Return transaction execution effects including the gas cost summary, while the effects are not committed to the chain.",
      "params": [
        {
          "name": "tx_bytes",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      ],
      "result": {
        "name": "DryRunTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/DryRunTransactionResponse"
        }
      }
    },
    {
      "name": "sui_executeTransaction",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Execute the transaction and wait for results if desired. Request types: 1. WaitForEffectsCert: waits for TransactionEffectsCert and then return to client.     This mode is a proxy for transaction finality. 2. WaitForLocalExecution: waits for TransactionEffectsCert and make sure the node     executed the transaction locally before returning the client. The local execution     makes sure this node is aware of this transaction when client fires subsequent queries.     However if the node fails to execute the transaction locally in a timely manner,     a bool type in the response is set to false to indicated the case.",
      "params": [
        {
          "name": "tx_bytes",
          "description": "BCS serialized transaction data bytes without its type tag, as base-64 encoded string.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "signature",
          "description": "`flag || signature || pubkey` bytes, as base-64 encoded string, signature is committed to the intent message of the transaction data, as base-64 encoded string.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "request_type",
          "description": "The request type",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ExecuteTransactionRequestType"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiTransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Execute an transaction with serialized signature",
          "params": [
            {
              "name": "tx_bytes",
              "value": "AABVfcQqrv7rjBVNfdxFa4rqoxMsdANTHcmOg/bhmNLX0XupHdx+cXz3CMk3Bg8EBIc27DP7F0bZmaXljNXGd+2AAgAAAAAAAAAgzMqpegLMOpgEFnDhYJ23FOmFjJbp5GmFXxzzv9+X6GVPuIgKC69cF+3DB1mtlwVnAyS6rhgBhRo36LTApC3mdU+C8chYe5jWTAC/tGw4Q72L9sz6fGWoYThpjNH9ysPcAgAAAAAAAAAg6NjHzoY/MT2j29kqg+8m0Si4j+Zr8m4ODQnNr3J9HYRPuIgKC69cF+3DB1mtlwVnAyS6rhgBhRo36LTApC3mdQEAAAAAAAAA6AMAAAAAAAAA"
            },
            {
              "name": "signature",
              "value": "AH6XTo1HVHf4m92sObAgdmoNTFLiCFSzj7eOJobK8KjO3xa0NIv6WEOBVcC19elqJ+OmstR38vGS8P6j+eG4Aw5tqSk/XTlS5stFH/W02Kxeyb0TWYjhlUjBKhMcXPgTNg=="
            },
            {
              "name": "request_type",
              "value": "WaitForLocalExecution"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "transaction": {
                "data": {
                  "transactions": [
                    {
                      "TransferObject": {
                        "recipient": "0x557dc42aaefeeb8c154d7ddc456b8aeaa3132c7403531dc98e83f6e198d2d7d1",
                        "objectRef": {
                          "objectId": "0x7ba91ddc7e717cf708c937060f04048736ec33fb1746d999a5e58cd5c677ed80",
                          "version": 2,
                          "digest": "EnRQXe1hDGAJCFyF2ds2GmPHdvf9V6yxf24LisEsDkYt"
                        }
                      }
                    }
                  ],
                  "sender": "0x4fb8880a0baf5c17edc30759ad9705670324baae1801851a37e8b4c0a42de675",
                  "gasData": {
                    "payment": {
                      "objectId": "0x4f82f1c8587b98d64c00bfb46c3843bd8bf6ccfa7c65a86138698cd1fdcac3dc",
                      "version": 2,
                      "digest": "GfwJqw63FK6AVQnKKkQprvrk3cVLziMBqhMfNkDuCHj9"
                    },
                    "owner": "0x4fb8880a0baf5c17edc30759ad9705670324baae1801851a37e8b4c0a42de675",
                    "price": 1,
                    "budget": 1000
                  }
                },
                "txSignatures": [
                  "AH6XTo1HVHf4m92sObAgdmoNTFLiCFSzj7eOJobK8KjO3xa0NIv6WEOBVcC19elqJ+OmstR38vGS8P6j+eG4Aw5tqSk/XTlS5stFH/W02Kxeyb0TWYjhlUjBKhMcXPgTNg=="
                ]
              },
              "effects": {
                "status": {
                  "status": "success"
                },
                "executedEpoch": 0,
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "transactionDigest": "Cv7n2YaM7Am1ssZGu4khsFkcKHnpgVhwFCSs4kLjrtLW",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0x4fb8880a0baf5c17edc30759ad9705670324baae1801851a37e8b4c0a42de675"
                    },
                    "reference": {
                      "objectId": "0x4f82f1c8587b98d64c00bfb46c3843bd8bf6ccfa7c65a86138698cd1fdcac3dc",
                      "version": 2,
                      "digest": "GfwJqw63FK6AVQnKKkQprvrk3cVLziMBqhMfNkDuCHj9"
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0x557dc42aaefeeb8c154d7ddc456b8aeaa3132c7403531dc98e83f6e198d2d7d1"
                    },
                    "reference": {
                      "objectId": "0x7ba91ddc7e717cf708c937060f04048736ec33fb1746d999a5e58cd5c677ed80",
                      "version": 2,
                      "digest": "EnRQXe1hDGAJCFyF2ds2GmPHdvf9V6yxf24LisEsDkYt"
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0x4fb8880a0baf5c17edc30759ad9705670324baae1801851a37e8b4c0a42de675"
                  },
                  "reference": {
                    "objectId": "0x4f82f1c8587b98d64c00bfb46c3843bd8bf6ccfa7c65a86138698cd1fdcac3dc",
                    "version": 2,
                    "digest": "GfwJqw63FK6AVQnKKkQprvrk3cVLziMBqhMfNkDuCHj9"
                  }
                },
                "eventsDigest": "B3xLC8EbyvTxy5pgiwTNUzHLa6kS7uwD6sZdErKB8F8f"
              },
              "events": [
                {
                  "transferObject": {
                    "packageId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                    "transactionModule": "native",
                    "sender": "0x4fb8880a0baf5c17edc30759ad9705670324baae1801851a37e8b4c0a42de675",
                    "recipient": {
                      "AddressOwner": "0x557dc42aaefeeb8c154d7ddc456b8aeaa3132c7403531dc98e83f6e198d2d7d1"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "0x7ba91ddc7e717cf708c937060f04048736ec33fb1746d999a5e58cd5c677ed80",
                    "version": 2
                  }
                }
              ],
              "checkpoint": null
            }
          }
        }
      ],
      "deprecated": true
    },
    {
      "name": "sui_executeTransactionSerializedSig",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "params": [
        {
          "name": "tx_bytes",
          "description": "BCS serialized transaction data bytes without its type tag, as base-64 encoded string.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "signature",
          "description": "`flag || signature || pubkey` bytes, as base-64 encoded string, signature is committed to the intent message of the transaction data, as base-64 encoded string.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "request_type",
          "description": "The request type",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ExecuteTransactionRequestType"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiTransactionResponse"
        }
      },
      "deprecated": true
    },
    {
      "name": "sui_getAllBalances",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return the total coin balance for all coin type, owned by the address owner.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<Balance>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Balance"
          }
        }
      }
    },
    {
      "name": "sui_getAllCoins",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return all Coin objects owned by an address.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CoinPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_Coin_and_ObjectID"
        }
      }
    },
    {
      "name": "sui_getBalance",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return the total coin balance for one coin type, owned by the address owner.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_type",
          "description": "optional type names for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Balance",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Balance"
        }
      }
    },
    {
      "name": "sui_getCheckpoint",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a checkpoint",
      "params": [
        {
          "name": "id",
          "description": "Checkpoint identifier, can use either checkpoint digest, or checkpoint sequence number as input.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CheckpointId"
          }
        }
      ],
      "result": {
        "name": "Checkpoint",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Checkpoint"
        }
      },
      "examples": [
        {
          "name": "Get checkpoint",
          "params": [
            {
              "name": "id",
              "value": 1000
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "epoch": 5000,
              "sequenceNumber": 1000,
              "digest": "3NynUFNC8xctjvGVBmGEDLNkAjSQpiygktDQhxhTBi8W",
              "networkTotalTransactions": 792385,
              "previousDigest": "76gyHCk7FRrGACRqXM7Ybj5uJLtAzgEMJ5P9CeEzxZSG",
              "epochRollingGasCostSummary": {
                "computation_cost": 0,
                "storage_cost": 0,
                "storage_rebate": 0
              },
              "timestampMs": 1676911928,
              "endOfEpochData": null,
              "transactions": [
                "6kerMphN4S5QTfd9TAhwMiFq1q9c2YwfpheBfWm85vUq"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "sui_getCheckpointContents",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return contents of a checkpoint, namely a list of execution digests",
      "params": [
        {
          "name": "sequence_number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CheckpointContents",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CheckpointContents"
        }
      }
    },
    {
      "name": "sui_getCheckpointContentsByDigest",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return contents of a checkpoint based on checkpoint content digest",
      "params": [
        {
          "name": "digest",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CheckpointContentsDigest"
          }
        }
      ],
      "result": {
        "name": "CheckpointContents",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CheckpointContents"
        }
      }
    },
    {
      "name": "sui_getCheckpointSummary",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a checkpoint summary based on a checkpoint sequence number",
      "params": [
        {
          "name": "sequence_number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CheckpointSummary",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CheckpointSummary"
        }
      }
    },
    {
      "name": "sui_getCheckpointSummaryByDigest",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a checkpoint summary based on checkpoint digest",
      "params": [
        {
          "name": "digest",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CheckpointDigest"
          }
        }
      ],
      "result": {
        "name": "CheckpointSummary",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CheckpointSummary"
        }
      }
    },
    {
      "name": "sui_getCoinMetadata",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return metadata(e.g., symbol, decimals) for a coin",
      "params": [
        {
          "name": "coin_type",
          "description": "type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiCoinMetadata",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiCoinMetadata"
        }
      }
    },
    {
      "name": "sui_getCoins",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return all Coin<`coin_type`> objects owned by an address.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_type",
          "description": "optional type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CoinPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_Coin_and_ObjectID"
        }
      }
    },
    {
      "name": "sui_getCommitteeInfo",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the committee information for the asked `epoch`.",
      "params": [
        {
          "name": "epoch",
          "description": "The epoch of interest. If None, default to the latest epoch",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CommitteeInfoResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CommitteeInfoResponse"
        }
      }
    },
    {
      "name": "sui_getDelegatedStakes",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return all [DelegatedStake].",
      "params": [
        {
          "name": "owner",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<DelegatedStake>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/DelegatedStake"
          }
        }
      }
    },
    {
      "name": "sui_getDisplayDeprecated",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the Display string of a object",
      "params": [
        {
          "name": "object_id",
          "description": "the id of the object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "BTreeMap<String,String>",
        "required": true,
        "schema": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "sui_getDynamicFieldObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the dynamic field object information for a specified object",
      "params": [
        {
          "name": "parent_object_id",
          "description": "The ID of the queried parent object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "name",
          "description": "The Name of the dynamic field",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/DynamicFieldName"
          }
        }
      ],
      "result": {
        "name": "GetObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      }
    },
    {
      "name": "sui_getDynamicFields",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the list of dynamic field objects owned by an object.",
      "params": [
        {
          "name": "parent_object_id",
          "description": "The ID of the parent object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "cursor",
          "description": "Optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "Maximum item returned per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "DynamicFieldPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_DynamicFieldInfo_and_ObjectID"
        }
      }
    },
    {
      "name": "sui_getEvents",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return list of events for a specified query criteria.",
      "params": [
        {
          "name": "query",
          "description": "the event query criteria.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventQuery"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/EventID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "descending_order",
          "description": "query result ordering, default to false (ascending order), oldest record first.",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "EventPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_EventEnvelope_and_EventID"
        }
      },
      "examples": [
        {
          "name": "Return the Events emitted by a transaction",
          "params": [
            {
              "name": "query",
              "value": {
                "Transaction": "7PsBHpUW6yfGNov2WrbVafLjgT9nYziQ3gVDbRq6zTbF"
              }
            },
            {
              "name": "cursor",
              "value": {
                "txDigest": "7PsBHpUW6yfGNov2WrbVafLjgT9nYziQ3gVDbRq6zTbF",
                "eventSeq": 10
              }
            },
            {
              "name": "limit",
              "value": 1
            },
            {
              "name": "descending_order",
              "value": false
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                {
                  "timestamp": 0,
                  "txDigest": "HzTi7BC8QyKBMEbcLMUF7H219B1LXC1EaE7hhCCQArJa",
                  "id": {
                    "txDigest": "HzTi7BC8QyKBMEbcLMUF7H219B1LXC1EaE7hhCCQArJa",
                    "eventSeq": 0
                  },
                  "event": {
                    "transferObject": {
                      "packageId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "transactionModule": "native",
                      "sender": "0x07579d9f6ba8ea13152dbcdac21159552dfbe58a18b3648e440a692e72767239",
                      "recipient": {
                        "AddressOwner": "0x6a101e9a3af5c8070112f808648b36efbf8dee8a1a82de46d9504e96a1108a17"
                      },
                      "objectType": "0x2::example::Object",
                      "objectId": "0x8ef76f56c399633a2eb310bca9124e5f2f38ce739eaacbb6600688804e078448",
                      "version": 2
                    }
                  }
                }
              ],
              "nextCursor": {
                "txDigest": "11a72GCQ5hGNpWGh2QhQkkusTEGS6EDqifJqxr7nSYX",
                "eventSeq": 5
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_getLatestCheckpointSequenceNumber",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the sequence number of the latest checkpoint that has been executed",
      "params": [],
      "result": {
        "name": "CheckpointSequenceNumber",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    {
      "name": "sui_getMoveFunctionArgTypes",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the argument types of a Move function, based on normalized Type.",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Vec<MoveFunctionArgType>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MoveFunctionArgType"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveFunction",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a structured representation of Move function",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedFunction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModule",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a structured representation of Move module",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedModule",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedModule"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModulesByPackage",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return structured representations of all modules in the given package",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "BTreeMap<String,SuiMoveNormalizedModule>",
        "required": true,
        "schema": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/SuiMoveNormalizedModule"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveStruct",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a structured representation of Move struct",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "struct_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedStruct",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
        }
      }
    },
    {
      "name": "sui_getObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the object information for a specified object",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "GetObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Object data",
          "params": [
            {
              "name": "object_id",
              "value": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "Exists",
              "details": {
                "data": {
                  "dataType": "moveObject",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "has_public_transfer": true,
                  "fields": {
                    "balance": "10000",
                    "id": {
                      "id": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809"
                    }
                  }
                },
                "owner": {
                  "AddressOwner": "0xc8ec1d5b84dd6289e193b9f88de4a994358c9f856135236c3e75a925e1c77ac3"
                },
                "previousTransaction": "5PLgmQye6rraDYqpV3npV6H1cUXoJZgJh1dPCyRa3WCv",
                "storageRebate": 100,
                "reference": {
                  "objectId": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809",
                  "version": 1,
                  "digest": "33K5ZXJ3RyubvYaHuEnQ1QXmmbhgtrFwp199dnEbL4n7"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_getObjectsOwnedByAddress",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the list of objects owned by an address.",
      "params": [
        {
          "name": "address",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiObjectInfo>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectInfo"
          }
        }
      },
      "examples": [
        {
          "name": "Get objects owned by an address",
          "params": [
            {
              "name": "address",
              "value": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "objectId": "0x1b9c00a93345ce5f12bea9ffe04748d6696c30631735193aea95b8f9082c1062",
                "version": 0,
                "digest": "p3mh2EkKPG2jckE87LnVpRF5uE3R7WWfaFZELQhqYMk",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
                },
                "previousTransaction": "Bv28BS3v5AuiQHY9SHfwo8PNM48mzR6LLBkbxsaoQFLd"
              },
              {
                "objectId": "0x33e3e1d64f76b71a80ec4f332f4d1a6742c537f2bb32473b01b1dcb1caac9427",
                "version": 0,
                "digest": "3LEKanp51C6hgnso1mkCBJZXTrxBtairWGstiozCYRoi",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
                },
                "previousTransaction": "FNgSG6ujbQ57wZaY4d8Jf6xAGJdqQvhRrSD9jTUHfVg6"
              },
              {
                "objectId": "0x1bc44cdfce3574e7f7f0b2de2323a06ebc356bad614726b313d811012d4be723",
                "version": 0,
                "digest": "8u3E7cQUSuo96NwJ9mYS4hMGCs48CEjreQPGrKGsVTMV",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
                },
                "previousTransaction": "6otjiis1Y5t2FFGcQjhof1wA2JSo4zhLEdQkH6GSXHHT"
              },
              {
                "objectId": "0x5d1123f2b8a0ac606b940a66e42efd782af5203112331adc2ed6f402dca396bf",
                "version": 0,
                "digest": "GYEZNzUU2HeTTUTFr8bmPQ4mCY9gpPiTHdim9GgAxxwb",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
                },
                "previousTransaction": "53FQJhUHQqRektpSXPdyn55rjqh3K142iR8jtdPiRZ54"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getRawObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the raw BCS serialized move object bytes for a specified object.",
      "params": [
        {
          "name": "object_id",
          "description": "the id of the object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "GetRawObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Raw Object data",
          "params": [
            {
              "name": "object_id",
              "value": "0x9c683fb7d0526e29d77e89e7bfefd4f73ada3d19ac87d45351f0196a880b95c3"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "Exists",
              "details": {
                "data": {
                  "dataType": "moveObject",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "has_public_transfer": true,
                  "version": 1,
                  "bcs_bytes": "nGg/t9BSbinXfonnv+/U9zraPRmsh9RTUfAZaogLlcMQJwAAAAAAAA=="
                },
                "owner": {
                  "AddressOwner": "0xea244dd060d2b6538196d048b7a6d04c8edc89579d86fd3fc90c52f9a14c6b81"
                },
                "previousTransaction": "3w8JW8MkgX1TRyt1iqY17fexUDLA7smydFvBWLqMKTyh",
                "storageRebate": 100,
                "reference": {
                  "objectId": "0x9c683fb7d0526e29d77e89e7bfefd4f73ada3d19ac87d45351f0196a880b95c3",
                  "version": 1,
                  "digest": "CPUUvmJjaAXLqTgYeySypZ16NPrvuXFE35E689JvD2J2"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_getReferenceGasPrice",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the reference gas price for the network",
      "params": [],
      "result": {
        "name": "u64",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    {
      "name": "sui_getSuiSystemState",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return [SuiSystemState]",
      "params": [],
      "result": {
        "name": "SuiSystemState",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiSystemState"
        }
      }
    },
    {
      "name": "sui_getTotalSupply",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return total supply for a coin",
      "params": [
        {
          "name": "coin_type",
          "description": "type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Supply",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Supply"
        }
      }
    },
    {
      "name": "sui_getTotalTransactionNumber",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the total number of transactions known to the server.",
      "params": [],
      "result": {
        "name": "u64",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "examples": [
        {
          "name": "Get total number of transactions",
          "params": [],
          "result": {
            "name": "Result",
            "value": 100
          }
        }
      ]
    },
    {
      "name": "sui_getTransaction",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the transaction response object.",
      "params": [
        {
          "name": "digest",
          "description": "the digest of the queried transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiTransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Return the transaction response object for specified transaction digest",
          "params": [
            {
              "name": "digest",
              "value": "GUPcK4cmRmgsTFr52ab9f6fnzNVg3Lz6hF2aXFcsRzaD"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "transaction": {
                "data": {
                  "transactions": [
                    {
                      "TransferObject": {
                        "recipient": "0x64bb73a1ed58b2c18b0cbf377792e206e6b80d4d5eea64e2e70563b1589026c4",
                        "objectRef": {
                          "objectId": "0xe37f941a451ef8209a0fbfbf1b549b2bb26b8eaee08895146df27bc3cf2610c1",
                          "version": 2,
                          "digest": "9BQobwxQvJ1JxSXNn8v8htZPTu8FEzJJGgcD4kgLUuMd"
                        }
                      }
                    }
                  ],
                  "sender": "0xf6f0ade7cd7d4c2ca2c1ad25115b06135dd146bd595eb56e4a30e1cd1aad862c",
                  "gasData": {
                    "payment": {
                      "objectId": "0x4b2e27c1eed56c33b579034150ea46bccf7653e00b6f24b63bd04da68bc160c7",
                      "version": 2,
                      "digest": "6AyFnAuKAKCqm1cD94EyGzBqJCDDJ716ojjmsKF2rqoi"
                    },
                    "owner": "0xf6f0ade7cd7d4c2ca2c1ad25115b06135dd146bd595eb56e4a30e1cd1aad862c",
                    "price": 1,
                    "budget": 1000
                  }
                },
                "txSignatures": [
                  "AGslC3jrqZbH8FVkZXU3usnxIf7DDSdoxmPnV3548G/pwcwY8/Frtaktfjba1lQG73/cbIcTM/3fhW5bnpvMbQfrrHXjLu++Rq9ubpXx7Qa15+TAMzHp1FEJlaxEOtOHYQ=="
                ]
              },
              "effects": {
                "status": {
                  "status": "success"
                },
                "executedEpoch": 0,
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "transactionDigest": "GUPcK4cmRmgsTFr52ab9f6fnzNVg3Lz6hF2aXFcsRzaD",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0xf6f0ade7cd7d4c2ca2c1ad25115b06135dd146bd595eb56e4a30e1cd1aad862c"
                    },
                    "reference": {
                      "objectId": "0x4b2e27c1eed56c33b579034150ea46bccf7653e00b6f24b63bd04da68bc160c7",
                      "version": 2,
                      "digest": "6AyFnAuKAKCqm1cD94EyGzBqJCDDJ716ojjmsKF2rqoi"
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0x64bb73a1ed58b2c18b0cbf377792e206e6b80d4d5eea64e2e70563b1589026c4"
                    },
                    "reference": {
                      "objectId": "0xe37f941a451ef8209a0fbfbf1b549b2bb26b8eaee08895146df27bc3cf2610c1",
                      "version": 2,
                      "digest": "9BQobwxQvJ1JxSXNn8v8htZPTu8FEzJJGgcD4kgLUuMd"
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0xf6f0ade7cd7d4c2ca2c1ad25115b06135dd146bd595eb56e4a30e1cd1aad862c"
                  },
                  "reference": {
                    "objectId": "0x4b2e27c1eed56c33b579034150ea46bccf7653e00b6f24b63bd04da68bc160c7",
                    "version": 2,
                    "digest": "6AyFnAuKAKCqm1cD94EyGzBqJCDDJ716ojjmsKF2rqoi"
                  }
                },
                "eventsDigest": "B2iV1SVbBjgTKfbJKPQrvTT6F3kNdekFuBwY9tQcAxV2"
              },
              "events": [
                {
                  "transferObject": {
                    "packageId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                    "transactionModule": "native",
                    "sender": "0xf6f0ade7cd7d4c2ca2c1ad25115b06135dd146bd595eb56e4a30e1cd1aad862c",
                    "recipient": {
                      "AddressOwner": "0x64bb73a1ed58b2c18b0cbf377792e206e6b80d4d5eea64e2e70563b1589026c4"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "0xe37f941a451ef8209a0fbfbf1b549b2bb26b8eaee08895146df27bc3cf2610c1",
                    "version": 2
                  }
                }
              ],
              "checkpoint": null
            }
          }
        }
      ]
    },
    {
      "name": "sui_getTransactions",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return list of transactions for a specified query criteria.",
      "params": [
        {
          "name": "query",
          "description": "the transaction query criteria.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionQuery"
          }
        },
        {
          "name": "cursor",
          "description": "Optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        },
        {
          "name": "limit",
          "description": "Maximum item returned per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "descending_order",
          "description": "query result ordering, default to false (ascending order), oldest record first.",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "TransactionsPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_TransactionDigest_and_TransactionDigest"
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified query criteria",
          "params": [
            {
              "name": "query",
              "value": {
                "InputObject": "0xc54ab30a3d9adc07c1429c4d6bbecaf9457c9af77a91f631760853934d383634"
              }
            },
            {
              "name": "cursor",
              "value": "DiemdKPLqS6GKyWoJqnqm18m3KmHTW2a516RfvZ6ETSX"
            },
            {
              "name": "limit",
              "value": 100
            },
            {
              "name": "descending_order",
              "value": false
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                "8QrPa4x9iNG5r2zQfmeH8pJoVjjtq9AGzp8rp2fxi8Sk",
                "3nek86HEjXZ7K3EtrAcBG4wMrCS21gqr8BqwwC6M6P7F",
                "AvLgYFSEW12Ac2uBFYcbznKdBj9CowNrpBuHMq53f8mu"
              ],
              "nextCursor": "HxidAfFfyr4kXSiWeVq1J6Tk526YUVDoSUY5PSnS4tEJ"
            }
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsInRange",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return list of transaction digests within the queried range.",
      "params": [
        {
          "name": "start",
          "description": "the matching transactions' sequence number will be greater than or equals to the starting sequence number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end",
          "description": "the matching transactions' sequence number will be less than the ending sequence number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<TransactionDigest>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      }
    },
    {
      "name": "sui_getValidators",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return all validators available for stake delegation.",
      "params": [],
      "result": {
        "name": "Vec<ValidatorMetadata>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ValidatorMetadata"
          }
        }
      }
    },
    {
      "name": "sui_mergeCoins",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to merge multiple coins into one coin.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "primary_coin",
          "description": "the coin object to merge into, this coin will remain after the transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "coin_to_merge",
          "description": "the coin object to be merged, this coin will be destroyed, the balance will be added to `primary_coin`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_moveCall",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to execute a Move call on the network, by calling the specified function in the module of a given package.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "package_object_id",
          "description": "the Move package ID, e.g. `0x2`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "description": "the Move module name, e.g. `devnet_nft`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "description": "the move function name, e.g. `mint`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "type_arguments",
          "description": "the type arguments of the Move function",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        },
        {
          "name": "arguments",
          "description": "the arguments to be passed into the Move function, in [SuiJson](https://docs.sui.io/build/sui-json) format",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "execution_mode",
          "description": "Whether this is a Normal transaction or a Dev Inspect Transaction. Default to be `SuiTransactionBuilderMode::Commit` when it's None.",
          "schema": {
            "$ref": "#/components/schemas/SuiTransactionBuilderMode"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_pay",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send `Coin<T>` to a list of addresses, where `T` can be any coin type, following a list of amounts, The object specified in the `gas` field will be used to pay the gas fee for the transaction. The gas object can not appear in `input_coins`. If the gas object is not specified, the RPC server will auto-select one.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipients",
          "description": "the recipients' addresses, the length of this vector must be the same as amounts.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        },
        {
          "name": "amounts",
          "description": "the amounts to be transferred to recipients, following the same order",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_payAllSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send all SUI coins to one recipient. This is for SUI coin only and does not require a separate gas coin object. Specifically, what pay_all_sui does are: 1. accumulate all SUI from input coins and deposit all SUI to the first input coin 2. transfer the updated first coin to the recipient and also use this first coin as gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - actual_gas_cost. 4. all other input coins other than the first are deleted.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction, including the coin for gas payment.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipient",
          "description": "the recipient address,",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_paySui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send SUI coins to a list of addresses, following a list of amounts. This is for SUI coin only and does not require a separate gas coin object. Specifically, what pay_sui does are: 1. debit each input_coin to create new coin following the order of amounts and assign it to the corresponding recipient. 2. accumulate all residual SUI from input coins left and deposit all SUI to the first input coin, then use the first input coin as the gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - sum(amounts) - actual_gas_cost 4. all other input coints other than the first one are deleted.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction, including the coin for gas payment.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipients",
          "description": "the recipients' addresses, the length of this vector must be the same as amounts.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        },
        {
          "name": "amounts",
          "description": "the amounts to be transferred to recipients, following the same order",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_publish",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to publish Move module.",
      "params": [
        {
          "name": "sender",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "compiled_modules",
          "description": "the compiled bytes of a move module, the",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_requestAddDelegation",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Add delegated stake to a validator's staking pool using multiple coins and amount.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coins",
          "description": "Coin<SUI> or LockedCoin<SUI> object to delegate",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "amount",
          "description": "delegation amount",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "validator",
          "description": "the validator's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_requestWithdrawDelegation",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Withdraw a delegation from a validator's staking pool.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "delegation",
          "description": "Delegation object ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "staked_sui",
          "description": "StakedSui object ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoin",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_amounts",
          "description": "the amounts to split out from the coin",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoinEqual",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple equal-size coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_count",
          "description": "the number of coins to split into",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_submitTransaction",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "params": [
        {
          "name": "tx_bytes",
          "description": "BCS serialized transaction data bytes without its type tag, as base-64 encoded string.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "signatures",
          "description": "A list of signatures (`flag || signature || pubkey` bytes, as base-64 encoded string). Signature is committed to the intent message of the transaction data, as base-64 encoded string.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "request_type",
          "description": "The request type",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ExecuteTransactionRequestType"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiTransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Execute an transaction with serialized signature",
          "params": [
            {
              "name": "tx_bytes",
              "value": "AAAy9L9sPorELu8TheAUA+SaSylq3LIuon08kuTOIlasZFy6vcNs8bny7ISBomyn2BFpVZeUAouPAuQwKlWV2IiaAgAAAAAAAAAgLEOAXQ1vVAKnrQ2lvexUnHzeoGvEodM5oiUh7qkzuInTBWxU38/Wzpg7ga1fbxcalrZhjj8rLo7egQ86U3GPP2fG0xxslw5WfwPvZ9gRpPhDZluN4/KC+kiz4BA7qbvtAgAAAAAAAAAgagYVO5/EhuEB8OnicDrIZm0GrsxN3355JqNhlwxlpbHTBWxU38/Wzpg7ga1fbxcalrZhjj8rLo7egQ86U3GPPwEAAAAAAAAA6AMAAAAAAAAA"
            },
            {
              "name": "signatures",
              "value": [
                "ANz1nc//IojONTcCQoBBkZPEoxhksBhL7jqy/JOSIMX9DPjIcAAEOJceXRDhHWGf1sxYS2QXeO/fVrJACZ7VFASRFyzRWy5Z5Iom1zB2m6Vx2RU7g7aQu+hOm3dBh5doKQ=="
              ]
            },
            {
              "name": "request_type",
              "value": "WaitForLocalExecution"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "transaction": {
                "data": {
                  "transactions": [
                    {
                      "TransferObject": {
                        "recipient": "0x32f4bf6c3e8ac42eef1385e01403e49a4b296adcb22ea27d3c92e4ce2256ac64",
                        "objectRef": {
                          "objectId": "0x5cbabdc36cf1b9f2ec8481a26ca7d81169559794028b8f02e4302a5595d8889a",
                          "version": 2,
                          "digest": "3yndxsmJNXFrRAUnuqKT6aekThhqmSDJ46opD7UjtL9N"
                        }
                      }
                    }
                  ],
                  "sender": "0xd3056c54dfcfd6ce983b81ad5f6f171a96b6618e3f2b2e8ede810f3a53718f3f",
                  "gasData": {
                    "payment": {
                      "objectId": "0x67c6d31c6c970e567f03ef67d811a4f843665b8de3f282fa48b3e0103ba9bbed",
                      "version": 2,
                      "digest": "88sbZ6JronTqbQUL25HUPouw9wJJRiSKtUjry81YgPDS"
                    },
                    "owner": "0xd3056c54dfcfd6ce983b81ad5f6f171a96b6618e3f2b2e8ede810f3a53718f3f",
                    "price": 1,
                    "budget": 1000
                  }
                },
                "txSignatures": [
                  "ANz1nc//IojONTcCQoBBkZPEoxhksBhL7jqy/JOSIMX9DPjIcAAEOJceXRDhHWGf1sxYS2QXeO/fVrJACZ7VFASRFyzRWy5Z5Iom1zB2m6Vx2RU7g7aQu+hOm3dBh5doKQ=="
                ]
              },
              "effects": {
                "status": {
                  "status": "success"
                },
                "executedEpoch": 0,
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "transactionDigest": "BhbWpBeESxuRWvmvLMyb2JNUuFa6j4aG1T4WUiPgKAHm",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0xd3056c54dfcfd6ce983b81ad5f6f171a96b6618e3f2b2e8ede810f3a53718f3f"
                    },
                    "reference": {
                      "objectId": "0x67c6d31c6c970e567f03ef67d811a4f843665b8de3f282fa48b3e0103ba9bbed",
                      "version": 2,
                      "digest": "88sbZ6JronTqbQUL25HUPouw9wJJRiSKtUjry81YgPDS"
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0x32f4bf6c3e8ac42eef1385e01403e49a4b296adcb22ea27d3c92e4ce2256ac64"
                    },
                    "reference": {
                      "objectId": "0x5cbabdc36cf1b9f2ec8481a26ca7d81169559794028b8f02e4302a5595d8889a",
                      "version": 2,
                      "digest": "3yndxsmJNXFrRAUnuqKT6aekThhqmSDJ46opD7UjtL9N"
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0xd3056c54dfcfd6ce983b81ad5f6f171a96b6618e3f2b2e8ede810f3a53718f3f"
                  },
                  "reference": {
                    "objectId": "0x67c6d31c6c970e567f03ef67d811a4f843665b8de3f282fa48b3e0103ba9bbed",
                    "version": 2,
                    "digest": "88sbZ6JronTqbQUL25HUPouw9wJJRiSKtUjry81YgPDS"
                  }
                },
                "eventsDigest": "GdfET1avZReDftpJNB8LSuHJ2cKUheSbEaLMzuPVXHsM"
              },
              "events": [
                {
                  "transferObject": {
                    "packageId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                    "transactionModule": "native",
                    "sender": "0xd3056c54dfcfd6ce983b81ad5f6f171a96b6618e3f2b2e8ede810f3a53718f3f",
                    "recipient": {
                      "AddressOwner": "0x32f4bf6c3e8ac42eef1385e01403e49a4b296adcb22ea27d3c92e4ce2256ac64"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "0x5cbabdc36cf1b9f2ec8481a26ca7d81169559794028b8f02e4302a5595d8889a",
                    "version": 2
                  }
                }
              ],
              "checkpoint": null
            }
          }
        }
      ]
    },
    {
      "name": "sui_subscribeEvent",
      "tags": [
        {
          "name": "Event Read API"
        },
        {
          "name": "Websocket"
        },
        {
          "name": "PubSub"
        }
      ],
      "description": "Subscribe to a stream of Sui event",
      "params": [
        {
          "name": "filter",
          "description": "the filter criteria of the event stream, see the [Sui docs](https://docs.sui.io/build/pubsub#event-filters) for detailed examples.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventFilter"
          }
        }
      ],
      "result": {
        "name": "SuiEventEnvelope",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/EventEnvelope"
        }
      }
    },
    {
      "name": "sui_tblsSignRandomnessObject",
      "tags": [
        {
          "name": "Threshold BLS API"
        }
      ],
      "description": "Sign an a Randomness object with threshold BLS. **Warning**: This API is a work in progress and uses insecure randomness. Please use it for testing purposes only.",
      "params": [
        {
          "name": "object_id",
          "description": "The object ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "commitment_type",
          "description": "The way in which the commitment on the object creation should be verified.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiTBlsSignObjectCommitmentType"
          }
        }
      ],
      "result": {
        "name": "SuiTBlsSignRandomnessObjectResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiTBlsSignRandomnessObjectResponse"
        }
      }
    },
    {
      "name": "sui_transferObject",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to transfer an object from one address to another. The object's type must allow public transfers",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "object_id",
          "description": "the ID of the object to be transferred",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_transferSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to send SUI coin object to a Sui address. The SUI object is also used as the gas object.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "sui_object_id",
          "description": "the Sui coin object to be used in this transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "amount",
          "description": "the amount to be split out and transferred",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_tryGetPastObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Note there is no software-level guarantee/SLA that objects with past versions can be retrieved by this API, even if the object and version exists/existed. The result may vary across nodes depending on their pruning policies. Return the object information for a specified version",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "version",
          "description": "the version of the queried object. If None, default to the latest known version",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      ],
      "result": {
        "name": "GetPastObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Past Object data",
          "params": [
            {
              "name": "object_id",
              "value": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760"
            },
            {
              "name": "version",
              "value": 4
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "VersionFound",
              "details": {
                "data": {
                  "dataType": "moveObject",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "has_public_transfer": true,
                  "fields": {
                    "balance": "10000",
                    "id": {
                      "id": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760"
                    }
                  }
                },
                "owner": {
                  "AddressOwner": "0x3568c40e814d9d5396d23087a0fd641e91e0e00df6c012cded9ef9ba5e5bf042"
                },
                "previousTransaction": "5jQByoouHBwaico5pQB73GdbzerC2StjTiHh5garBjiV",
                "storageRebate": 100,
                "reference": {
                  "objectId": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760",
                  "version": 4,
                  "digest": "5VPAwDXy3BL72ehFc7gSJoz27ahMd6spUg5YwYc4ibcv"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "components": {
    "schemas": {
      "AuthorityPublicKeyBytes": {
        "description": "Defines the compressed version of the public key that we pass around in Sui",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base64"
          }
        ]
      },
      "Balance": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "BalanceChangeType": {
        "type": "string",
        "enum": [
          "Gas",
          "Pay",
          "Receive"
        ]
      },
      "Base58": {
        "type": "string"
      },
      "Base64": {
        "description": "Base64 encoding",
        "type": "string"
      },
      "Checkpoint": {
        "type": "object",
        "required": [
          "digest",
          "epoch",
          "epochRollingGasCostSummary",
          "networkTotalTransactions",
          "sequenceNumber",
          "timestampMs",
          "transactions"
        ],
        "properties": {
          "digest": {
            "description": "Checkpoint digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckpointDigest"
              }
            ]
          },
          "endOfEpochData": {
            "description": "Present only on the final checkpoint of the epoch.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/EndOfEpochData"
              },
              {
                "type": "null"
              }
            ]
          },
          "epoch": {
            "description": "Checkpoint's epoch ID",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epochRollingGasCostSummary": {
            "description": "The running total gas costs of all transactions included in the current epoch so far until this checkpoint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasCostSummary"
              }
            ]
          },
          "networkTotalTransactions": {
            "description": "Total number of transactions committed since genesis, including those in this checkpoint.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "previousDigest": {
            "description": "Digest of the previous checkpoint",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CheckpointDigest"
              },
              {
                "type": "null"
              }
            ]
          },
          "sequenceNumber": {
            "description": "Checkpoint sequence number",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "timestampMs": {
            "description": "Timestamp of the checkpoint - number of milliseconds from the Unix epoch Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent checkpoints can have same timestamp if they originate from the same underlining consensus commit",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "transactions": {
            "description": "Transaction digests",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          }
        }
      },
      "CheckpointContents": {
        "description": "CheckpointContents are the transactions included in an upcoming checkpoint. They must have already been causally ordered. Since the causal order algorithm is the same among validators, we expect all honest validators to come up with the same order for each checkpoint content.",
        "type": "object",
        "required": [
          "transactions",
          "user_signatures"
        ],
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionDigests"
            }
          },
          "user_signatures": {
            "description": "This field 'pins' user signatures for the checkpoint The length of this vector is same as length of transactions vector System transactions has empty signatures",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GenericSignature"
              }
            }
          }
        }
      },
      "CheckpointContentsDigest": {
        "$ref": "#/components/schemas/Sha3Digest"
      },
      "CheckpointDigest": {
        "description": "Representation of a Checkpoint's digest",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sha3Digest"
          }
        ]
      },
      "CheckpointId": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "$ref": "#/components/schemas/CheckpointDigest"
          }
        ]
      },
      "CheckpointSummary": {
        "type": "object",
        "required": [
          "content_digest",
          "epoch",
          "epoch_rolling_gas_cost_summary",
          "network_total_transactions",
          "sequence_number",
          "timestamp_ms",
          "version_specific_data"
        ],
        "properties": {
          "content_digest": {
            "$ref": "#/components/schemas/CheckpointContentsDigest"
          },
          "end_of_epoch_data": {
            "description": "Present only on the final checkpoint of the epoch.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/EndOfEpochData"
              },
              {
                "type": "null"
              }
            ]
          },
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch_rolling_gas_cost_summary": {
            "description": "The running total gas costs of all transactions included in the current epoch so far until this checkpoint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasCostSummary"
              }
            ]
          },
          "network_total_transactions": {
            "description": "Total number of transactions committed since genesis, including those in this checkpoint.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "previous_digest": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CheckpointDigest"
              },
              {
                "type": "null"
              }
            ]
          },
          "sequence_number": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "timestamp_ms": {
            "description": "Timestamp of the checkpoint - number of milliseconds from the Unix epoch Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent checkpoints can have same timestamp if they originate from the same underlining consensus commit",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "version_specific_data": {
            "description": "CheckpointSummary is not an evolvable structure - it must be readable by any version of the code. Therefore, in order to allow extensions to be added to CheckpointSummary, we allow opaque data to be added to checkpoints which can be deserialized based on the current protocol version.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "Coin": {
        "type": "object",
        "required": [
          "balance",
          "coinObjectId",
          "coinType",
          "digest",
          "previousTransaction",
          "version"
        ],
        "properties": {
          "balance": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "coinObjectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "coinType": {
            "type": "string"
          },
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "lockedUntilEpoch": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "previousTransaction": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "CommitteeInfoResponse": {
        "type": "object",
        "required": [
          "committee_info",
          "epoch",
          "protocol_version"
        ],
        "properties": {
          "committee_info": {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/AuthorityPublicKeyBytes"
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "protocol_version": {
            "$ref": "#/components/schemas/ProtocolVersion"
          }
        }
      },
      "CompressedSignature": {
        "description": "Unlike [enum Signature], [enum CompressedSignature] does not contain public key.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519"
            ],
            "properties": {
              "Ed25519": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1"
            ],
            "properties": {
              "Secp256k1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1"
            ],
            "properties": {
              "Secp256r1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Data": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "dataType",
              "fields",
              "has_public_transfer",
              "type"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "moveObject"
                ]
              },
              "fields": {
                "$ref": "#/components/schemas/MoveStruct"
              },
              "has_public_transfer": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dataType",
              "disassembled"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "package"
                ]
              },
              "disassembled": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        ]
      },
      "DelegatedStake": {
        "type": "object",
        "required": [
          "delegation_status",
          "staked_sui"
        ],
        "properties": {
          "delegation_status": {
            "$ref": "#/components/schemas/DelegationStatus"
          },
          "staked_sui": {
            "$ref": "#/components/schemas/StakedSui"
          }
        }
      },
      "Delegation": {
        "type": "object",
        "required": [
          "id",
          "pool_tokens",
          "principal_sui_amount",
          "staked_sui_id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UID"
          },
          "pool_tokens": {
            "$ref": "#/components/schemas/Balance"
          },
          "principal_sui_amount": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "staked_sui_id": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      },
      "DelegationStatus": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Pending"
            ]
          },
          {
            "type": "object",
            "required": [
              "Active"
            ],
            "properties": {
              "Active": {
                "$ref": "#/components/schemas/Delegation"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "DevInspectResults": {
        "description": "The response from processing a dev inspect transaction",
        "type": "object",
        "required": [
          "effects",
          "events",
          "results"
        ],
        "properties": {
          "effects": {
            "description": "Summary of effects that likely would be generated if the transaction is actually run. Note however, that not all dev-inspect transactions are actually usable as transactions so it might not be possible actually generate these effects from a normal transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionEffects"
              }
            ]
          },
          "events": {
            "description": "Events that likely would be generated if the transaction is actually run.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "results": {
            "description": "Execution results (including return values) from executing the transactions Currently contains only return values from Move calls",
            "allOf": [
              {
                "$ref": "#/components/schemas/Result_of_Array_of_Tuple_of_uint_and_SuiExecutionResult_or_String"
              }
            ]
          }
        }
      },
      "DryRunTransactionResponse": {
        "type": "object",
        "required": [
          "effects",
          "events"
        ],
        "properties": {
          "effects": {
            "$ref": "#/components/schemas/TransactionEffects"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "DynamicFieldInfo": {
        "type": "object",
        "required": [
          "digest",
          "name",
          "objectId",
          "objectType",
          "type",
          "version"
        ],
        "properties": {
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "name": {
            "$ref": "#/components/schemas/DynamicFieldName"
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "objectType": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DynamicFieldType"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "DynamicFieldName": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "value": true
        }
      },
      "DynamicFieldType": {
        "type": "string",
        "enum": [
          "DynamicField",
          "DynamicObject"
        ]
      },
      "Ed25519SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "EffectsFinalityInfo": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "certified"
            ],
            "properties": {
              "certified": {
                "$ref": "#/components/schemas/SuiAuthorityStrongQuorumSignInfo"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "checkpointed"
            ],
            "properties": {
              "checkpointed": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EndOfEpochData": {
        "type": "object",
        "required": [
          "next_epoch_committee",
          "next_epoch_protocol_version",
          "root_state_digest"
        ],
        "properties": {
          "next_epoch_committee": {
            "description": "next_epoch_committee is `Some` if and only if the current checkpoint is the last checkpoint of an epoch. Therefore next_epoch_committee can be used to pick the last checkpoint of an epoch, which is often useful to get epoch level summary stats like total gas cost of an epoch, or the total number of transactions from genesis to the end of an epoch. The committee is stored as a vector of validator pub key and stake pairs. The vector should be sorted based on the Committee data structure.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/AuthorityPublicKeyBytes"
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "next_epoch_protocol_version": {
            "description": "The protocol version that is in effect during the epoch that starts immediately after this checkpoint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProtocolVersion"
              }
            ]
          },
          "root_state_digest": {
            "description": "The digest of the union of all checkpoint accumulators, representing the state of the system at the end of the epoch.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 32,
            "minItems": 32
          }
        }
      },
      "Entry_for_SuiAddress_and_VecSet_for_SuiAddress": {
        "description": "Rust version of the Move sui::vec_map::Entry type",
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "value": {
            "$ref": "#/components/schemas/VecSet_for_SuiAddress"
          }
        }
      },
      "Event": {
        "oneOf": [
          {
            "description": "Move-specific event",
            "type": "object",
            "required": [
              "moveEvent"
            ],
            "properties": {
              "moveEvent": {
                "type": "object",
                "required": [
                  "bcs",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "type"
                ],
                "properties": {
                  "bcs": {
                    "$ref": "#/components/schemas/Base64"
                  },
                  "fields": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/MoveStruct"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Module published",
            "type": "object",
            "required": [
              "publish"
            ],
            "properties": {
              "publish": {
                "type": "object",
                "required": [
                  "digest",
                  "packageId",
                  "sender",
                  "version"
                ],
                "properties": {
                  "digest": {
                    "$ref": "#/components/schemas/ObjectDigest"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Coin balance changing event",
            "type": "object",
            "required": [
              "coinBalanceChange"
            ],
            "properties": {
              "coinBalanceChange": {
                "type": "object",
                "required": [
                  "amount",
                  "changeType",
                  "coinObjectId",
                  "coinType",
                  "owner",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "amount": {
                    "type": "integer",
                    "format": "int128"
                  },
                  "changeType": {
                    "$ref": "#/components/schemas/BalanceChangeType"
                  },
                  "coinObjectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "coinType": {
                    "type": "string"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Epoch change",
            "type": "object",
            "required": [
              "epochChange"
            ],
            "properties": {
              "epochChange": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "New checkpoint",
            "type": "object",
            "required": [
              "checkpoint"
            ],
            "properties": {
              "checkpoint": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transfer objects to new address / wrap in another object / coin",
            "type": "object",
            "required": [
              "transferObject"
            ],
            "properties": {
              "transferObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "recipient",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "recipient": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object mutated.",
            "type": "object",
            "required": [
              "mutateObject"
            ],
            "properties": {
              "mutateObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Delete object",
            "type": "object",
            "required": [
              "deleteObject"
            ],
            "properties": {
              "deleteObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "New object creation",
            "type": "object",
            "required": [
              "newObject"
            ],
            "properties": {
              "newObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "recipient",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "recipient": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventEnvelope": {
        "type": "object",
        "required": [
          "event",
          "id",
          "timestamp",
          "txDigest"
        ],
        "properties": {
          "event": {
            "description": "Specific event type",
            "allOf": [
              {
                "$ref": "#/components/schemas/Event"
              }
            ]
          },
          "id": {
            "description": "Sequential event ID, ie (transaction seq number, event seq number). 1) Serves as a unique event ID for each fullnode 2) Also serves to sequence events for the purposes of pagination and querying. A higher id is an event seen later by that fullnode. This ID is the \"cursor\" for event querying.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EventID"
              }
            ]
          },
          "timestamp": {
            "description": "UTC timestamp in milliseconds since epoch (1/1/1970)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "txDigest": {
            "description": "Transaction digest of associated transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ]
          }
        }
      },
      "EventFilter": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Package"
            ],
            "properties": {
              "Package": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Module"
            ],
            "properties": {
              "Module": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Move StructTag string value of the event type e.g. `0x2::devnet_nft::MintNFTEvent`",
            "type": "object",
            "required": [
              "MoveEventType"
            ],
            "properties": {
              "MoveEventType": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MoveEventField"
            ],
            "properties": {
              "MoveEventField": {
                "type": "object",
                "required": [
                  "path",
                  "value"
                ],
                "properties": {
                  "path": {
                    "type": "string"
                  },
                  "value": true
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SenderAddress"
            ],
            "properties": {
              "SenderAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "EventType"
            ],
            "properties": {
              "EventType": {
                "$ref": "#/components/schemas/EventType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ObjectId"
            ],
            "properties": {
              "ObjectId": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "All"
            ],
            "properties": {
              "All": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Any"
            ],
            "properties": {
              "Any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "And"
            ],
            "properties": {
              "And": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Or"
            ],
            "properties": {
              "Or": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventID": {
        "description": "Unique ID of a Sui Event, the ID is a combination of tx seq number and event seq number, the ID is local to this particular fullnode and will be different from other fullnode.",
        "type": "object",
        "required": [
          "eventSeq",
          "txDigest"
        ],
        "properties": {
          "eventSeq": {
            "type": "integer",
            "format": "int64"
          },
          "txDigest": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      },
      "EventQuery": {
        "oneOf": [
          {
            "description": "Return all events.",
            "type": "string",
            "enum": [
              "All"
            ]
          },
          {
            "description": "Return events emitted by the given transaction.",
            "type": "object",
            "required": [
              "Transaction"
            ],
            "properties": {
              "Transaction": {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in a specified Move module",
            "type": "object",
            "required": [
              "MoveModule"
            ],
            "properties": {
              "MoveModule": {
                "type": "object",
                "required": [
                  "module",
                  "package"
                ],
                "properties": {
                  "module": {
                    "description": "the module name",
                    "type": "string"
                  },
                  "package": {
                    "description": "the Move package ID",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ObjectID"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events with the given move event struct name",
            "type": "object",
            "required": [
              "MoveEvent"
            ],
            "properties": {
              "MoveEvent": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "EventType"
            ],
            "properties": {
              "EventType": {
                "$ref": "#/components/schemas/EventType"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by sender address.",
            "type": "object",
            "required": [
              "Sender"
            ],
            "properties": {
              "Sender": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by recipient address.",
            "type": "object",
            "required": [
              "Recipient"
            ],
            "properties": {
              "Recipient": {
                "$ref": "#/components/schemas/Owner"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events associated with the given object",
            "type": "object",
            "required": [
              "Object"
            ],
            "properties": {
              "Object": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in [start_time, end_time] interval",
            "type": "object",
            "required": [
              "TimeRange"
            ],
            "properties": {
              "TimeRange": {
                "type": "object",
                "required": [
                  "endTime",
                  "startTime"
                ],
                "properties": {
                  "endTime": {
                    "description": "right endpoint of time interval, milliseconds since epoch, exclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "startTime": {
                    "description": "left endpoint of time interval, milliseconds since epoch, inclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventType": {
        "description": "Auto-generated discriminant enum variants",
        "oneOf": [
          {
            "description": "Transaction level event Move-specific event",
            "type": "string",
            "enum": [
              "MoveEvent"
            ]
          },
          {
            "description": "Module published",
            "type": "string",
            "enum": [
              "Publish"
            ]
          },
          {
            "description": "Coin balance changing event",
            "type": "string",
            "enum": [
              "CoinBalanceChange"
            ]
          },
          {
            "description": "Epoch change",
            "type": "string",
            "enum": [
              "EpochChange"
            ]
          },
          {
            "description": "New checkpoint",
            "type": "string",
            "enum": [
              "Checkpoint"
            ]
          },
          {
            "description": "Object level event Transfer objects to new address / wrap in another object",
            "type": "string",
            "enum": [
              "TransferObject"
            ]
          },
          {
            "description": "Object level event Object mutated.",
            "type": "string",
            "enum": [
              "MutateObject"
            ]
          },
          {
            "description": "Delete object",
            "type": "string",
            "enum": [
              "DeleteObject"
            ]
          },
          {
            "description": "New object creation",
            "type": "string",
            "enum": [
              "NewObject"
            ]
          }
        ]
      },
      "ExecuteTransactionRequestType": {
        "type": "string",
        "enum": [
          "WaitForEffectsCert",
          "WaitForLocalExecution"
        ]
      },
      "ExecutionDigests": {
        "type": "object",
        "required": [
          "effects",
          "transaction"
        ],
        "properties": {
          "effects": {
            "$ref": "#/components/schemas/TransactionEffectsDigest"
          },
          "transaction": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      },
      "ExecutionStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "success"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error",
              "status"
            ],
            "properties": {
              "error": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "failure"
                ]
              }
            }
          }
        ]
      },
      "FinalizedEffects": {
        "type": "object",
        "required": [
          "effects",
          "finalityInfo",
          "transactionEffectsDigest"
        ],
        "properties": {
          "effects": {
            "$ref": "#/components/schemas/TransactionEffects"
          },
          "finalityInfo": {
            "$ref": "#/components/schemas/EffectsFinalityInfo"
          },
          "transactionEffectsDigest": {
            "$ref": "#/components/schemas/TransactionEffectsDigest"
          }
        }
      },
      "GasCostSummary": {
        "type": "object",
        "required": [
          "computationCost",
          "storageCost",
          "storageRebate"
        ],
        "properties": {
          "computationCost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageCost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageRebate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "GasData": {
        "type": "object",
        "required": [
          "budget",
          "owner",
          "payment",
          "price"
        ],
        "properties": {
          "budget": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "owner": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "payment": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "price": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "GenericSignature": {
        "description": "Due to the incompatibility of [enum Signature] (which dispatches a trait that assumes signature and pubkey bytes for verification), here we add a wrapper enum where member can just implement a lightweight [trait AuthenticatorTrait]. This way MultiSig (and future Authenticators) can implement its own `verify`.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MultiSig"
            ],
            "properties": {
              "MultiSig": {
                "$ref": "#/components/schemas/MultiSig"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Signature"
            ],
            "properties": {
              "Signature": {
                "$ref": "#/components/schemas/Signature"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Hex": {
        "description": "Hex string encoding.",
        "type": "string"
      },
      "InputObjectKind": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MovePackage"
            ],
            "properties": {
              "MovePackage": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ImmOrOwnedMoveObject"
            ],
            "properties": {
              "ImmOrOwnedMoveObject": {
                "$ref": "#/components/schemas/ObjectRef"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SharedMoveObject"
            ],
            "properties": {
              "SharedMoveObject": {
                "type": "object",
                "required": [
                  "id",
                  "initial_shared_version"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "initial_shared_version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  },
                  "mutable": {
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MoveCall": {
        "type": "object",
        "required": [
          "function",
          "module",
          "package"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "package": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "typeArguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MoveCallParams": {
        "type": "object",
        "required": [
          "arguments",
          "function",
          "module",
          "packageObjectId"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "packageObjectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "typeArguments": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        }
      },
      "MoveFunctionArgType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Pure"
            ]
          },
          {
            "type": "object",
            "required": [
              "Object"
            ],
            "properties": {
              "Object": {
                "$ref": "#/components/schemas/ObjectValueKind"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MovePackage": {
        "type": "object",
        "required": [
          "disassembled"
        ],
        "properties": {
          "disassembled": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "MoveStruct": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "object",
            "required": [
              "fields",
              "type"
            ],
            "properties": {
              "fields": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/MoveValue"
                }
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MoveValue"
            }
          }
        ]
      },
      "MoveValue": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/SuiAddress"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "string"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            }
          },
          {
            "$ref": "#/components/schemas/MoveStruct"
          },
          {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MoveValue"
              },
              {
                "type": "null"
              }
            ]
          }
        ]
      },
      "MultiSig": {
        "description": "The struct that contains signatures and public keys necessary for authenticating a MultiSig.",
        "type": "object",
        "required": [
          "bitmap",
          "multisig_pk",
          "sigs"
        ],
        "properties": {
          "bitmap": {
            "description": "A bitmap that indicates the position of which public key the signature should be authenticated with.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          },
          "multisig_pk": {
            "description": "The public key encoded with each public key with its signature scheme used along with the corresponding weight.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiSigPublicKey"
              }
            ]
          },
          "sigs": {
            "description": "The plain signature encoded with signature scheme.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompressedSignature"
            }
          }
        }
      },
      "MultiSigPublicKey": {
        "description": "The struct that contains the public key used for authenticating a MultiSig.",
        "type": "object",
        "required": [
          "pk_map",
          "threshold"
        ],
        "properties": {
          "pk_map": {
            "description": "A list of public key and its corresponding weight.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/PublicKey"
                },
                {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "threshold": {
            "description": "If the total weight of the public keys corresponding to verified signatures is larger than threshold, the MultiSig is verified.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        }
      },
      "Object": {
        "type": "object",
        "required": [
          "data",
          "owner",
          "previousTransaction",
          "reference",
          "storageRebate"
        ],
        "properties": {
          "data": {
            "description": "The meat of the object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Data"
              }
            ]
          },
          "owner": {
            "description": "The owner that unlocks this object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              }
            ]
          },
          "previousTransaction": {
            "description": "The digest of the transaction that created or last mutated this object",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ]
          },
          "reference": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "storageRebate": {
            "description": "The amount of SUI we would rebate if this object gets deleted. This number is re-calculated each time the object is mutated based on the present storage gas price.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "ObjectDigest": {
        "$ref": "#/components/schemas/Sha3Digest"
      },
      "ObjectID": {
        "$ref": "#/components/schemas/Hex"
      },
      "ObjectInfo": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "owner",
          "previousTransaction",
          "type",
          "version"
        ],
        "properties": {
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "previousTransaction": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "ObjectRead": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/Object"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Exists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "status": {
                "type": "string",
                "enum": [
                  "NotExists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectRef"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Deleted"
                ]
              }
            }
          }
        ]
      },
      "ObjectRef": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "version"
        ],
        "properties": {
          "digest": {
            "description": "Base64 string representing the object digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectDigest"
              }
            ]
          },
          "objectId": {
            "description": "Hex code as string representing the object id",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "version": {
            "description": "Object version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ObjectValueKind": {
        "type": "string",
        "enum": [
          "ByImmutableReference",
          "ByMutableReference",
          "ByValue"
        ]
      },
      "OwnedObjectRef": {
        "type": "object",
        "required": [
          "owner",
          "reference"
        ],
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "reference": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        }
      },
      "Owner": {
        "oneOf": [
          {
            "description": "Object is exclusively owned by a single address, and is mutable.",
            "type": "object",
            "required": [
              "AddressOwner"
            ],
            "properties": {
              "AddressOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is exclusively owned by a single object, and is mutable. The object ID is converted to SuiAddress as SuiAddress is universal.",
            "type": "object",
            "required": [
              "ObjectOwner"
            ],
            "properties": {
              "ObjectOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is shared, can be used by any address, and is mutable.",
            "type": "object",
            "required": [
              "Shared"
            ],
            "properties": {
              "Shared": {
                "type": "object",
                "required": [
                  "initial_shared_version"
                ],
                "properties": {
                  "initial_shared_version": {
                    "description": "The version at which the object became shared",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SequenceNumber"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is immutable, and hence ownership doesn't matter.",
            "type": "string",
            "enum": [
              "Immutable"
            ]
          }
        ]
      },
      "Page_for_Coin_and_ObjectID": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            }
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_DynamicFieldInfo_and_ObjectID": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DynamicFieldInfo"
            }
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_EventEnvelope_and_EventID": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventEnvelope"
            }
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EventID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_TransactionDigest_and_TransactionDigest": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Pay": {
        "type": "object",
        "required": [
          "amounts",
          "coins",
          "recipients"
        ],
        "properties": {
          "amounts": {
            "description": "The amounts each recipient will receive. Must be the same length as amounts",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "coins": {
            "description": "The coins to be used for payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "recipients": {
            "description": "The addresses that will receive payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        }
      },
      "PayAllSui": {
        "description": "Send all SUI coins to one recipient. only for SUI coin and does not require a separate gas coin object either. Specifically, what pay_all_sui does are: 1. accumulate all SUI from input coins and deposit all SUI to the first input coin 2. transfer the updated first coin to the recipient and also use this first coin as gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - actual_gas_cost. 4. all other input coins other than the first are deleted.",
        "type": "object",
        "required": [
          "coins",
          "recipient"
        ],
        "properties": {
          "coins": {
            "description": "The coins to be used for payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "recipient": {
            "description": "The addresses that will receive payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/SuiAddress"
              }
            ]
          }
        }
      },
      "PaySui": {
        "description": "Send SUI coins to a list of addresses, following a list of amounts. only for SUI coin and does not require a separate gas coin object. Specifically, what pay_sui does are: 1. debit each input_coin to create new coin following the order of amounts and assign it to the corresponding recipient. 2. accumulate all residual SUI from input coins left and deposit all SUI to the first input coin, then use the first input coin as the gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - sum(amounts) - actual_gas_cost 4. all other input coints other than the first one are deleted.",
        "type": "object",
        "required": [
          "amounts",
          "coins",
          "recipients"
        ],
        "properties": {
          "amounts": {
            "description": "The amounts each recipient will receive. Must be the same length as amounts",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "coins": {
            "description": "The coins to be used for payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "recipients": {
            "description": "The addresses that will receive payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        }
      },
      "ProtocolVersion": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "PublicKey": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519"
            ],
            "properties": {
              "Ed25519": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1"
            ],
            "properties": {
              "Secp256k1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1"
            ],
            "properties": {
              "Secp256r1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RPCTransactionRequestParams": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "transferObjectRequestParams"
            ],
            "properties": {
              "transferObjectRequestParams": {
                "$ref": "#/components/schemas/TransferObjectParams"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "moveCallRequestParams"
            ],
            "properties": {
              "moveCallRequestParams": {
                "$ref": "#/components/schemas/MoveCallParams"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Result_of_Array_of_Tuple_of_uint_and_SuiExecutionResult_or_String": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint",
                      "minimum": 0.0
                    },
                    {
                      "$ref": "#/components/schemas/SuiExecutionResult"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Secp256k1SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "Secp256r1SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "SequenceNumber": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "Sha3Digest": {
        "description": "A representation of a SHA3-256 Digest",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base58"
          }
        ]
      },
      "Signature": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519SuiSignature"
            ],
            "properties": {
              "Ed25519SuiSignature": {
                "$ref": "#/components/schemas/Ed25519SuiSignature"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1SuiSignature"
            ],
            "properties": {
              "Secp256k1SuiSignature": {
                "$ref": "#/components/schemas/Secp256k1SuiSignature"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1SuiSignature"
            ],
            "properties": {
              "Secp256r1SuiSignature": {
                "$ref": "#/components/schemas/Secp256r1SuiSignature"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "StakeSubsidy": {
        "type": "object",
        "required": [
          "balance",
          "current_epoch_amount",
          "epoch_counter"
        ],
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/Balance"
          },
          "current_epoch_amount": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch_counter": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "StakedSui": {
        "type": "object",
        "required": [
          "delegation_request_epoch",
          "id",
          "pool_id",
          "principal",
          "validator_address"
        ],
        "properties": {
          "delegation_request_epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "id": {
            "$ref": "#/components/schemas/UID"
          },
          "pool_id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "principal": {
            "$ref": "#/components/schemas/Balance"
          },
          "sui_token_lock": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "validator_address": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "StakingPool": {
        "description": "Rust version of the Move sui::staking_pool::StakingPool type",
        "type": "object",
        "required": [
          "exchange_rates",
          "id",
          "pending_delegation",
          "pending_withdraws",
          "pool_token_balance",
          "rewards_pool",
          "starting_epoch",
          "sui_balance"
        ],
        "properties": {
          "exchange_rates": {
            "$ref": "#/components/schemas/Table"
          },
          "id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "pending_delegation": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "pending_withdraws": {
            "$ref": "#/components/schemas/TableVec"
          },
          "pool_token_balance": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "rewards_pool": {
            "$ref": "#/components/schemas/Balance"
          },
          "starting_epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "sui_balance": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "SuiAddress": {
        "$ref": "#/components/schemas/Hex"
      },
      "SuiAuthorityStrongQuorumSignInfo": {
        "type": "object",
        "required": [
          "epoch",
          "signature",
          "signers_map"
        ],
        "properties": {
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "signature": {
            "$ref": "#/components/schemas/Base64"
          },
          "signers_map": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      },
      "SuiChangeEpoch": {
        "type": "object",
        "required": [
          "computation_charge",
          "epoch",
          "epoch_start_timestamp_ms",
          "storage_charge",
          "storage_rebate"
        ],
        "properties": {
          "computation_charge": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch_start_timestamp_ms": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storage_charge": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storage_rebate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "SuiCoinMetadata": {
        "type": "object",
        "required": [
          "decimals",
          "description",
          "name",
          "symbol"
        ],
        "properties": {
          "decimals": {
            "description": "Number of decimal places the coin uses.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "description": {
            "description": "Description of the token",
            "type": "string"
          },
          "iconUrl": {
            "description": "URL for the token logo",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "description": "Object id for the CoinMetadata object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "description": "Name for the token",
            "type": "string"
          },
          "symbol": {
            "description": "Symbol for the token",
            "type": "string"
          }
        }
      },
      "SuiConsensusCommitPrologue": {
        "type": "object",
        "required": [
          "commit_timestamp_ms",
          "epoch",
          "round"
        ],
        "properties": {
          "commit_timestamp_ms": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "round": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "SuiExecutionResult": {
        "type": "object",
        "properties": {
          "mutableReferenceOutputs": {
            "description": "The value of any arguments that were mutably borrowed. Non-mut borrowed values are not included",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                {
                  "$ref": "#/components/schemas/TypeTag"
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          },
          "returnValues": {
            "description": "The return values from the function",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                {
                  "$ref": "#/components/schemas/TypeTag"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "SuiGenesisTransaction": {
        "type": "object",
        "required": [
          "objects"
        ],
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        }
      },
      "SuiJsonValue": {},
      "SuiMoveAbility": {
        "type": "string",
        "enum": [
          "Copy",
          "Drop",
          "Store",
          "Key"
        ]
      },
      "SuiMoveAbilitySet": {
        "type": "object",
        "required": [
          "abilities"
        ],
        "properties": {
          "abilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbility"
            }
          }
        }
      },
      "SuiMoveModuleId": {
        "type": "object",
        "required": [
          "address",
          "name"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SuiMoveNormalizedField": {
        "type": "object",
        "required": [
          "name",
          "type_"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type_": {
            "$ref": "#/components/schemas/SuiMoveNormalizedType"
          }
        }
      },
      "SuiMoveNormalizedFunction": {
        "type": "object",
        "required": [
          "is_entry",
          "parameters",
          "return_",
          "type_parameters",
          "visibility"
        ],
        "properties": {
          "is_entry": {
            "type": "boolean"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "return_": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "type_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbilitySet"
            }
          },
          "visibility": {
            "$ref": "#/components/schemas/SuiMoveVisibility"
          }
        }
      },
      "SuiMoveNormalizedModule": {
        "type": "object",
        "required": [
          "address",
          "exposed_functions",
          "file_format_version",
          "friends",
          "name",
          "structs"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "exposed_functions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
            }
          },
          "file_format_version": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveModuleId"
            }
          },
          "name": {
            "type": "string"
          },
          "structs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
            }
          }
        }
      },
      "SuiMoveNormalizedStruct": {
        "type": "object",
        "required": [
          "abilities",
          "fields",
          "type_parameters"
        ],
        "properties": {
          "abilities": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedField"
            }
          },
          "type_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveStructTypeParameter"
            }
          }
        }
      },
      "SuiMoveNormalizedType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Bool",
              "U8",
              "U16",
              "U32",
              "U64",
              "U128",
              "U256",
              "Address",
              "Signer"
            ]
          },
          {
            "type": "object",
            "required": [
              "Struct"
            ],
            "properties": {
              "Struct": {
                "type": "object",
                "required": [
                  "address",
                  "module",
                  "name",
                  "type_arguments"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "module": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type_arguments": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiMoveNormalizedType"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Vector"
            ],
            "properties": {
              "Vector": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "TypeParameter"
            ],
            "properties": {
              "TypeParameter": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Reference"
            ],
            "properties": {
              "Reference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MutableReference"
            ],
            "properties": {
              "MutableReference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiMoveStructTypeParameter": {
        "type": "object",
        "required": [
          "constraints",
          "is_phantom"
        ],
        "properties": {
          "constraints": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "is_phantom": {
            "type": "boolean"
          }
        }
      },
      "SuiMoveVisibility": {
        "type": "string",
        "enum": [
          "Private",
          "Public",
          "Friend"
        ]
      },
      "SuiSystemState": {
        "description": "Rust version of the Move sui::sui_system::SuiSystemStateInner type We want to keep it named as SuiSystemState in Rust since this is the primary interface type.",
        "type": "object",
        "required": [
          "epoch",
          "epoch_start_timestamp_ms",
          "parameters",
          "protocol_version",
          "reference_gas_price",
          "safe_mode",
          "stake_subsidy",
          "storage_fund",
          "validator_report_records",
          "validators"
        ],
        "properties": {
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch_start_timestamp_ms": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "parameters": {
            "$ref": "#/components/schemas/SystemParameters"
          },
          "protocol_version": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "reference_gas_price": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "safe_mode": {
            "type": "boolean"
          },
          "stake_subsidy": {
            "$ref": "#/components/schemas/StakeSubsidy"
          },
          "storage_fund": {
            "$ref": "#/components/schemas/Balance"
          },
          "validator_report_records": {
            "$ref": "#/components/schemas/VecMap_for_SuiAddress_and_VecSet_for_SuiAddress"
          },
          "validators": {
            "$ref": "#/components/schemas/ValidatorSet"
          }
        }
      },
      "SuiTBlsSignObjectCommitmentType": {
        "oneOf": [
          {
            "description": "Check that the object is committed by the consensus.",
            "type": "string",
            "enum": [
              "ConsensusCommitted"
            ]
          },
          {
            "description": "Check that the object is committed using the effects certificate.",
            "type": "object",
            "required": [
              "FastPathCommitted"
            ],
            "properties": {
              "FastPathCommitted": {
                "$ref": "#/components/schemas/FinalizedEffects"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiTBlsSignRandomnessObjectResponse": {
        "type": "object",
        "required": [
          "signature"
        ],
        "properties": {
          "signature": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      },
      "SuiTransactionBuilderMode": {
        "oneOf": [
          {
            "description": "Regular Sui Transactions that are committed on chain",
            "type": "string",
            "enum": [
              "Commit"
            ]
          },
          {
            "description": "Simulated transaction that allows calling any Move function with arbitrary values.",
            "type": "string",
            "enum": [
              "DevInspect"
            ]
          }
        ]
      },
      "SuiTransactionResponse": {
        "type": "object",
        "required": [
          "effects",
          "events",
          "transaction"
        ],
        "properties": {
          "checkpoint": {
            "description": "The checkpoint number when this transaction was included and hence finalized. This is only returned in the read api, not in the transaction execution api.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "confirmedLocalExecution": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "effects": {
            "$ref": "#/components/schemas/TransactionEffects"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "timestampMs": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "Supply": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "SystemParameters": {
        "description": "Rust version of the Move sui::sui_system::SystemParameters type",
        "type": "object",
        "required": [
          "max_validator_candidate_count",
          "min_validator_stake"
        ],
        "properties": {
          "max_validator_candidate_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "min_validator_stake": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "Table": {
        "description": "Rust version of the Move sui::table::Table type. Putting it here since we only use it in sui_system in the framework.",
        "type": "object",
        "required": [
          "id",
          "size"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "size": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "TableVec": {
        "description": "Rust version of the Move sui::table::Table type. Putting it here since we only use it in sui_system in the framework.",
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "$ref": "#/components/schemas/Table"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "required": [
          "data",
          "txSignatures"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TransactionData"
          },
          "txSignatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericSignature"
            }
          }
        }
      },
      "TransactionBytes": {
        "type": "object",
        "required": [
          "gas",
          "inputObjects",
          "txBytes"
        ],
        "properties": {
          "gas": {
            "description": "the gas object to be used",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectRef"
              }
            ]
          },
          "inputObjects": {
            "description": "objects to be used in this transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputObjectKind"
            }
          },
          "txBytes": {
            "description": "BCS serialized transaction data bytes without its type tag, as base-64 encoded string.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          }
        }
      },
      "TransactionData": {
        "type": "object",
        "required": [
          "gasData",
          "sender",
          "transactions"
        ],
        "properties": {
          "gasData": {
            "$ref": "#/components/schemas/GasData"
          },
          "sender": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionKind"
            }
          }
        }
      },
      "TransactionDigest": {
        "description": "A transaction will have a (unique) digest.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sha3Digest"
          }
        ]
      },
      "TransactionEffects": {
        "description": "The response from processing a transaction or a certified transaction",
        "type": "object",
        "required": [
          "executedEpoch",
          "gasObject",
          "gasUsed",
          "status",
          "transactionDigest"
        ],
        "properties": {
          "created": {
            "description": "ObjectRef and owner of new objects created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnedObjectRef"
            }
          },
          "deleted": {
            "description": "Object Refs of objects now deleted (the old refs).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "dependencies": {
            "description": "The set of transaction digests this transaction depends on.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          },
          "eventsDigest": {
            "description": "The digest of the events emitted during execution, can be None if the transaction does not emmit any event.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionEventsDigest"
              },
              {
                "type": "null"
              }
            ]
          },
          "executedEpoch": {
            "description": "The epoch when this transaction was executed.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gasObject": {
            "description": "The updated gas object reference. Have a dedicated field for convenient access. It's also included in mutated.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OwnedObjectRef"
              }
            ]
          },
          "gasUsed": {
            "$ref": "#/components/schemas/GasCostSummary"
          },
          "mutated": {
            "description": "ObjectRef and owner of mutated objects, including gas object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnedObjectRef"
            }
          },
          "sharedObjects": {
            "description": "The object references of the shared objects used in this transaction. Empty if no shared objects were used.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "status": {
            "description": "The status of the execution",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecutionStatus"
              }
            ]
          },
          "transactionDigest": {
            "description": "The transaction digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ]
          },
          "unwrapped": {
            "description": "ObjectRef and owner of objects that are unwrapped in this transaction. Unwrapped objects are objects that were wrapped into other objects in the past, and just got extracted out.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnedObjectRef"
            }
          },
          "unwrappedThenDeleted": {
            "description": "Object refs of objects previously wrapped in other objects but now deleted.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "wrapped": {
            "description": "Object refs of objects now wrapped in other objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        }
      },
      "TransactionEffectsDigest": {
        "$ref": "#/components/schemas/Sha3Digest"
      },
      "TransactionEventsDigest": {
        "$ref": "#/components/schemas/Sha3Digest"
      },
      "TransactionKind": {
        "oneOf": [
          {
            "description": "Initiate an object transfer between addresses",
            "type": "object",
            "required": [
              "TransferObject"
            ],
            "properties": {
              "TransferObject": {
                "$ref": "#/components/schemas/TransferObject"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay one or more recipients from a set of input coins",
            "type": "object",
            "required": [
              "Pay"
            ],
            "properties": {
              "Pay": {
                "$ref": "#/components/schemas/Pay"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay one or more recipients from a set of Sui coins, the input coins are also used to for gas payments.",
            "type": "object",
            "required": [
              "PaySui"
            ],
            "properties": {
              "PaySui": {
                "$ref": "#/components/schemas/PaySui"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay one or more recipients from a set of Sui coins, the input coins are also used to for gas payments.",
            "type": "object",
            "required": [
              "PayAllSui"
            ],
            "properties": {
              "PayAllSui": {
                "$ref": "#/components/schemas/PayAllSui"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Publish a new Move module",
            "type": "object",
            "required": [
              "Publish"
            ],
            "properties": {
              "Publish": {
                "$ref": "#/components/schemas/MovePackage"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Call a function in a published Move module",
            "type": "object",
            "required": [
              "Call"
            ],
            "properties": {
              "Call": {
                "$ref": "#/components/schemas/MoveCall"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Initiate a SUI coin transfer between addresses",
            "type": "object",
            "required": [
              "TransferSui"
            ],
            "properties": {
              "TransferSui": {
                "$ref": "#/components/schemas/TransferSui"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A system transaction that will update epoch information on-chain.",
            "type": "object",
            "required": [
              "ChangeEpoch"
            ],
            "properties": {
              "ChangeEpoch": {
                "$ref": "#/components/schemas/SuiChangeEpoch"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A system transaction used for initializing the initial state of the chain.",
            "type": "object",
            "required": [
              "Genesis"
            ],
            "properties": {
              "Genesis": {
                "$ref": "#/components/schemas/SuiGenesisTransaction"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A system transaction marking the start of a series of transactions scheduled as part of a checkpoint",
            "type": "object",
            "required": [
              "ConsensusCommitPrologue"
            ],
            "properties": {
              "ConsensusCommitPrologue": {
                "$ref": "#/components/schemas/SuiConsensusCommitPrologue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransactionQuery": {
        "oneOf": [
          {
            "description": "All transaction hashes.",
            "type": "string",
            "enum": [
              "All"
            ]
          },
          {
            "description": "Query by move function.",
            "type": "object",
            "required": [
              "MoveFunction"
            ],
            "properties": {
              "MoveFunction": {
                "type": "object",
                "required": [
                  "package"
                ],
                "properties": {
                  "function": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "module": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "package": {
                    "$ref": "#/components/schemas/ObjectID"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by input object.",
            "type": "object",
            "required": [
              "InputObject"
            ],
            "properties": {
              "InputObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by mutated object.",
            "type": "object",
            "required": [
              "MutatedObject"
            ],
            "properties": {
              "MutatedObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by sender address.",
            "type": "object",
            "required": [
              "FromAddress"
            ],
            "properties": {
              "FromAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by recipient address.",
            "type": "object",
            "required": [
              "ToAddress"
            ],
            "properties": {
              "ToAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransferObject": {
        "type": "object",
        "required": [
          "objectRef",
          "recipient"
        ],
        "properties": {
          "objectRef": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TransferObjectParams": {
        "type": "object",
        "required": [
          "objectId",
          "recipient"
        ],
        "properties": {
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TransferSui": {
        "type": "object",
        "required": [
          "recipient"
        ],
        "properties": {
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TypeTag": {
        "type": "string"
      },
      "UID": {
        "description": "Rust version of the Move sui::object::Info type",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      },
      "Validator": {
        "description": "Rust version of the Move sui::validator::Validator type",
        "type": "object",
        "required": [
          "commission_rate",
          "gas_price",
          "metadata",
          "next_epoch_commission_rate",
          "next_epoch_delegation",
          "next_epoch_gas_price",
          "next_epoch_stake",
          "staking_pool",
          "voting_power"
        ],
        "properties": {
          "commission_rate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gas_price": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "metadata": {
            "$ref": "#/components/schemas/ValidatorMetadata"
          },
          "next_epoch_commission_rate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "next_epoch_delegation": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "next_epoch_gas_price": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "next_epoch_stake": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "staking_pool": {
            "$ref": "#/components/schemas/StakingPool"
          },
          "voting_power": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "ValidatorMetadata": {
        "type": "object",
        "required": [
          "consensus_address",
          "description",
          "image_url",
          "name",
          "net_address",
          "network_pubkey_bytes",
          "p2p_address",
          "project_url",
          "proof_of_possession_bytes",
          "pubkey_bytes",
          "sui_address",
          "worker_address",
          "worker_pubkey_bytes"
        ],
        "properties": {
          "consensus_address": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "net_address": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "network_pubkey_bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "p2p_address": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "project_url": {
            "type": "string"
          },
          "proof_of_possession_bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "pubkey_bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "sui_address": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "worker_address": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "worker_pubkey_bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "ValidatorSet": {
        "description": "Rust version of the Move sui::validator_set::ValidatorSet type",
        "type": "object",
        "required": [
          "active_validators",
          "pending_removals",
          "pending_validators",
          "staking_pool_mappings",
          "total_stake"
        ],
        "properties": {
          "active_validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validator"
            }
          },
          "pending_removals": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "pending_validators": {
            "$ref": "#/components/schemas/TableVec"
          },
          "staking_pool_mappings": {
            "$ref": "#/components/schemas/Table"
          },
          "total_stake": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "VecMap_for_SuiAddress_and_VecSet_for_SuiAddress": {
        "description": "Rust version of the Move sui::vec_map::VecMap type",
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entry_for_SuiAddress_and_VecSet_for_SuiAddress"
            }
          }
        }
      },
      "VecSet_for_SuiAddress": {
        "description": "Rust version of the Move sui::vec_set::VecSet type",
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        }
      }
    }
  }
}
