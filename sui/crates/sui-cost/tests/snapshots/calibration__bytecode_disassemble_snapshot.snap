---
source: crates/sui-cost/tests/calibration.rs
expression: bytecode_calib
---
// Move bytecode v6
module 2.bytecode_calibration_tests {
use 0000000000000000000000000000000000000000000000000000000000000001::unit_test;


struct ObjectWithU8Field has drop, store {
	f0: u8
}
struct ObjectWithU64Field has drop, store {
	f0: u64
}

entry public test_calibrate_add() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Add
	12: LdU64(1)
	13: Add
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_add__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Add
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_sub() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: LdU64(1)
	13: Sub
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_sub__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_mul() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Mul
	12: LdU64(1)
	13: Mul
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_mul__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Mul
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_div() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Div
	12: LdU64(1)
	13: Div
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_div__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Div
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_mod() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Mod
	12: LdU64(1)
	13: Mod
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_mod__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Mod
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_and() {
L0:	flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](flag#1#0: bool)
	10: LdFalse
	11: And
	12: LdFalse
	13: And
	14: StLoc[0](flag#1#0: bool)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_and__baseline() {
L0:	flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](flag#1#0: bool)
	10: LdFalse
	11: And
	12: StLoc[0](flag#1#0: bool)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_or() {
L0:	flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](flag#1#0: bool)
	10: LdFalse
	11: Or
	12: LdFalse
	13: Or
	14: StLoc[0](flag#1#0: bool)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_or__baseline() {
L0:	flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](flag#1#0: bool)
	10: LdFalse
	11: Or
	12: StLoc[0](flag#1#0: bool)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_xor() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Xor
	12: LdU64(1)
	13: Xor
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_xor__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: Xor
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_shr() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU8(1)
	11: Shr
	12: LdU8(1)
	13: Shr
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_shr__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU8(1)
	11: Shr
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_shl() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU8(1)
	11: Shl
	12: LdU8(1)
	13: Shl
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_shl__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU8(1)
	11: Shl
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_bitand() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: BitAnd
	12: LdU64(1)
	13: BitAnd
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_bitand__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: BitAnd
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_bitor() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: BitOr
	12: LdU64(1)
	13: BitOr
	14: StLoc[0](num#1#0: u64)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_bitor__baseline() {
L0:	num#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	3: StLoc[0](num#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](num#1#0: u64)
	10: LdU64(1)
	11: BitOr
	12: StLoc[0](num#1#0: u64)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_eq() {
L0:	flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](flag#1#0: bool)
	10: LdTrue
	11: Eq
	12: LdTrue
	13: Eq
	14: StLoc[0](flag#1#0: bool)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_eq__baseline() {
L0:	flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](flag#1#0: bool)
	10: LdTrue
	11: Eq
	12: StLoc[0](flag#1#0: bool)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_neq() {
L0:	flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](flag#1#0: bool)
	10: LdTrue
	11: Neq
	12: LdTrue
	13: Neq
	14: StLoc[0](flag#1#0: bool)
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_neq__baseline() {
L0:	flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](flag#1#0: bool)
	10: LdTrue
	11: Neq
	12: StLoc[0](flag#1#0: bool)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_lt() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(16)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Lt
	10: Pop
	11: MoveLoc[0](trials#1#0: u64)
	12: LdU64(1)
	13: Sub
	14: StLoc[0](trials#1#0: u64)
	15: Branch(2)
B4:
	16: Ret
}
entry public test_calibrate_lt__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_gt() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(16)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Gt
	10: Pop
	11: MoveLoc[0](trials#1#0: u64)
	12: LdU64(1)
	13: Sub
	14: StLoc[0](trials#1#0: u64)
	15: Branch(2)
B4:
	16: Ret
}
entry public test_calibrate_gt__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_le() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(16)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Le
	10: Pop
	11: MoveLoc[0](trials#1#0: u64)
	12: LdU64(1)
	13: Sub
	14: StLoc[0](trials#1#0: u64)
	15: Branch(2)
B4:
	16: Ret
}
entry public test_calibrate_le__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_ge() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(16)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Ge
	10: Pop
	11: MoveLoc[0](trials#1#0: u64)
	12: LdU64(1)
	13: Sub
	14: StLoc[0](trials#1#0: u64)
	15: Branch(2)
B4:
	16: Ret
}
entry public test_calibrate_ge__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_not() {
L0:	_flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](_flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](_flag#1#0: bool)
	10: Not
	11: Not
	12: StLoc[0](_flag#1#0: bool)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_not__baseline() {
L0:	_flag#1#0: bool
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdFalse
	3: StLoc[0](_flag#1#0: bool)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(17)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](_flag#1#0: bool)
	10: Not
	11: StLoc[0](_flag#1#0: bool)
	12: MoveLoc[1](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[1](trials#1#0: u64)
	16: Branch(4)
B4:
	17: Ret
}
entry public test_calibrate_imm_borrow_loc() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: ImmBorrowLoc[0](trials#1#0: u64)
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_imm_borrow_loc__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(12)
B2:
	6: Branch(7)
B3:
	7: MoveLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Sub
	10: StLoc[0](trials#1#0: u64)
	11: Branch(2)
B4:
	12: Ret
}
entry public test_calibrate_mut_borrow_loc() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: MutBorrowLoc[0](trials#1#0: u64)
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_mut_borrow_loc__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(12)
B2:
	6: Branch(7)
B3:
	7: MoveLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Sub
	10: StLoc[0](trials#1#0: u64)
	11: Branch(2)
B4:
	12: Ret
}
entry public test_calibrate_imm_borrow_field() {
L0:	obj#1#0: ObjectWithU64Field
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: Pack[1](ObjectWithU64Field)
	4: StLoc[0](obj#1#0: ObjectWithU64Field)
B1:
	5: CopyLoc[1](trials#1#0: u64)
	6: LdU64(0)
	7: Gt
	8: BrFalse(18)
B2:
	9: Branch(10)
B3:
	10: ImmBorrowLoc[0](obj#1#0: ObjectWithU64Field)
	11: ImmBorrowField[0](ObjectWithU64Field.f0: u64)
	12: Pop
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(5)
B4:
	18: Ret
}
entry public test_calibrate_imm_borrow_field__baseline() {
L0:	obj#1#0: ObjectWithU64Field
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: Pack[1](ObjectWithU64Field)
	4: StLoc[0](obj#1#0: ObjectWithU64Field)
B1:
	5: CopyLoc[1](trials#1#0: u64)
	6: LdU64(0)
	7: Gt
	8: BrFalse(17)
B2:
	9: Branch(10)
B3:
	10: ImmBorrowLoc[0](obj#1#0: ObjectWithU64Field)
	11: Pop
	12: MoveLoc[1](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[1](trials#1#0: u64)
	16: Branch(5)
B4:
	17: Ret
}
entry public test_calibrate_mut_borrow_field() {
L0:	obj#1#0: ObjectWithU64Field
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: Pack[1](ObjectWithU64Field)
	4: StLoc[0](obj#1#0: ObjectWithU64Field)
B1:
	5: CopyLoc[1](trials#1#0: u64)
	6: LdU64(0)
	7: Gt
	8: BrFalse(18)
B2:
	9: Branch(10)
B3:
	10: MutBorrowLoc[0](obj#1#0: ObjectWithU64Field)
	11: MutBorrowField[0](ObjectWithU64Field.f0: u64)
	12: Pop
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(5)
B4:
	18: Ret
}
entry public test_calibrate_mut_borrow_field__baseline() {
L0:	obj#1#0: ObjectWithU64Field
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: Pack[1](ObjectWithU64Field)
	4: StLoc[0](obj#1#0: ObjectWithU64Field)
B1:
	5: CopyLoc[1](trials#1#0: u64)
	6: LdU64(0)
	7: Gt
	8: BrFalse(17)
B2:
	9: Branch(10)
B3:
	10: MutBorrowLoc[0](obj#1#0: ObjectWithU64Field)
	11: Pop
	12: MoveLoc[1](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[1](trials#1#0: u64)
	16: Branch(5)
B4:
	17: Ret
}
entry public test_calibrate_ldu8() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU8(0)
	3: Pop
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(16)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: LdU8(0)
	14: Pop
	15: Branch(4)
B4:
	16: Ret
}
entry public test_calibrate_ldu8__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU8(0)
	3: Pop
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(14)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(4)
B4:
	14: Ret
}
entry public test_calibrate_ldu64() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU64(0)
	3: Pop
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(16)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: LdU64(0)
	14: Pop
	15: Branch(4)
B4:
	16: Ret
}
entry public test_calibrate_ldu64__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU64(0)
	3: Pop
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(14)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(4)
B4:
	14: Ret
}
entry public test_calibrate_ldu128() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU128(0)
	3: Pop
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(16)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: LdU128(0)
	14: Pop
	15: Branch(4)
B4:
	16: Ret
}
entry public test_calibrate_ldu128__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU128(0)
	3: Pop
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(14)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(4)
B4:
	14: Ret
}
entry public test_calibrate_ld_const() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU64(0)
	3: Pop
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(16)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: LdConst[1](U64: [255, 255, 255, 255, 255, 255, 255, 255])
	14: Pop
	15: Branch(4)
B4:
	16: Ret
}
entry public test_calibrate_ld_const__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU64(0)
	3: Pop
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(14)
B2:
	8: Branch(9)
B3:
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(4)
B4:
	14: Ret
}
entry public test_calibrate_pack() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: Branch(7)
B3:
	7: MoveLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Sub
	10: StLoc[0](trials#1#0: u64)
	11: LdU8(0)
	12: Pack[0](ObjectWithU8Field)
	13: Pop
	14: Branch(2)
B4:
	15: Ret
}
entry public test_calibrate_pack__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: MoveLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Sub
	10: StLoc[0](trials#1#0: u64)
	11: LdU8(0)
	12: Pop
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_unpack() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(16)
B2:
	6: Branch(7)
B3:
	7: MoveLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Sub
	10: StLoc[0](trials#1#0: u64)
	11: LdU8(0)
	12: Pack[0](ObjectWithU8Field)
	13: Unpack[0](ObjectWithU8Field)
	14: Pop
	15: Branch(2)
B4:
	16: Ret
}
entry public test_calibrate_unpack__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: Branch(7)
B3:
	7: MoveLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Sub
	10: StLoc[0](trials#1#0: u64)
	11: LdU8(0)
	12: Pack[0](ObjectWithU8Field)
	13: Pop
	14: Branch(2)
B4:
	15: Ret
}
entry public test_calibrate_read_ref() {
L0:	r#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](r#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(17)
B2:
	8: Branch(9)
B3:
	9: ImmBorrowLoc[0](r#1#0: u64)
	10: ReadRef
	11: Pop
	12: MoveLoc[1](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[1](trials#1#0: u64)
	16: Branch(4)
B4:
	17: Ret
}
entry public test_calibrate_read_ref__baseline() {
L0:	r#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](r#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(16)
B2:
	8: Branch(9)
B3:
	9: ImmBorrowLoc[0](r#1#0: u64)
	10: Pop
	11: MoveLoc[1](trials#1#0: u64)
	12: LdU64(1)
	13: Sub
	14: StLoc[1](trials#1#0: u64)
	15: Branch(4)
B4:
	16: Ret
}
entry public test_calibrate_write_ref() {
L0:	r#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](r#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(17)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[1](trials#1#0: u64)
	10: MutBorrowLoc[0](r#1#0: u64)
	11: WriteRef
	12: MoveLoc[1](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[1](trials#1#0: u64)
	16: Branch(4)
B4:
	17: Ret
}
entry public test_calibrate_write_ref__baseline() {
L0:	r#1#0: u64
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
	2: LdU64(0)
	3: StLoc[0](r#1#0: u64)
B1:
	4: CopyLoc[1](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(18)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[1](trials#1#0: u64)
	10: Pop
	11: MutBorrowLoc[0](r#1#0: u64)
	12: Pop
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(4)
B4:
	18: Ret
}
entry public test_calibrate_copy_loc() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_copy_loc__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(12)
B2:
	6: Branch(7)
B3:
	7: MoveLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Sub
	10: StLoc[0](trials#1#0: u64)
	11: Branch(2)
B4:
	12: Ret
}
entry public test_calibrate_vec_len() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(17)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: ImmBorrowLoc[0](hash#1#0: vector<u8>)
	10: VecLen(6)
	11: Pop
	12: MoveLoc[1](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[1](trials#1#0: u64)
	16: Branch(2)
B4:
	17: Ret
}
entry public test_calibrate_vec_len__baseline() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(16)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: ImmBorrowLoc[0](hash#1#0: vector<u8>)
	10: Pop
	11: MoveLoc[1](trials#1#0: u64)
	12: LdU64(1)
	13: Sub
	14: StLoc[1](trials#1#0: u64)
	15: Branch(2)
B4:
	16: Ret
}
entry public test_calibrate_vec_push_back() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(17)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: MutBorrowLoc[0](hash#1#0: vector<u8>)
	10: LdU8(0)
	11: VecPushBack(6)
	12: MoveLoc[1](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[1](trials#1#0: u64)
	16: Branch(2)
B4:
	17: Ret
}
entry public test_calibrate_vec_push_back__baseline() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(18)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: MutBorrowLoc[0](hash#1#0: vector<u8>)
	10: Pop
	11: LdU8(0)
	12: Pop
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(2)
B4:
	18: Ret
}
entry public test_calibrate_vec_pop_back() {
L0:	hash#1#0: vector<u8>
L1:	hash#2#0: vector<u8>
L2:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[2](trials#1#0: u64)
B1:
	2: CopyLoc[2](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(17)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: MutBorrowLoc[0](hash#1#0: vector<u8>)
	10: LdU8(0)
	11: VecPushBack(6)
	12: MoveLoc[2](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[2](trials#1#0: u64)
	16: Branch(2)
B4:
	17: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	18: StLoc[2](trials#1#0: u64)
B5:
	19: CopyLoc[2](trials#1#0: u64)
	20: LdU64(0)
	21: Gt
	22: BrFalse(34)
B6:
	23: Branch(24)
B7:
	24: LdConst[2](Vector(U8): [2, 1, 52])
	25: StLoc[1](hash#2#0: vector<u8>)
	26: MutBorrowLoc[1](hash#2#0: vector<u8>)
	27: VecPopBack(6)
	28: Pop
	29: MoveLoc[2](trials#1#0: u64)
	30: LdU64(1)
	31: Sub
	32: StLoc[2](trials#1#0: u64)
	33: Branch(19)
B8:
	34: Ret
}
entry public test_calibrate_vec_pop_back__baseline() {
L0:	hash#1#0: vector<u8>
L1:	hash#2#0: vector<u8>
L2:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[2](trials#1#0: u64)
B1:
	2: CopyLoc[2](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(17)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: MutBorrowLoc[0](hash#1#0: vector<u8>)
	10: LdU8(0)
	11: VecPushBack(6)
	12: MoveLoc[2](trials#1#0: u64)
	13: LdU64(1)
	14: Sub
	15: StLoc[2](trials#1#0: u64)
	16: Branch(2)
B4:
	17: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	18: StLoc[2](trials#1#0: u64)
B5:
	19: CopyLoc[2](trials#1#0: u64)
	20: LdU64(0)
	21: Gt
	22: BrFalse(33)
B6:
	23: Branch(24)
B7:
	24: LdConst[2](Vector(U8): [2, 1, 52])
	25: StLoc[1](hash#2#0: vector<u8>)
	26: MutBorrowLoc[1](hash#2#0: vector<u8>)
	27: Pop
	28: MoveLoc[2](trials#1#0: u64)
	29: LdU64(1)
	30: Sub
	31: StLoc[2](trials#1#0: u64)
	32: Branch(19)
B8:
	33: Ret
}
entry public test_calibrate_vec_pack() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: VecPack(3, 1)
	9: Pop
	10: MoveLoc[0](trials#1#0: u64)
	11: LdU64(1)
	12: Sub
	13: StLoc[0](trials#1#0: u64)
	14: Branch(2)
B4:
	15: Ret
}
entry public test_calibrate_vec_pack__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: CopyLoc[0](trials#1#0: u64)
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_vec_swap() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(18)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: MutBorrowLoc[0](hash#1#0: vector<u8>)
	10: LdU64(0)
	11: LdU64(1)
	12: VecSwap(6)
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(2)
B4:
	18: Ret
}
entry public test_calibrate_vec_swap__baseline() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(20)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: MutBorrowLoc[0](hash#1#0: vector<u8>)
	10: Pop
	11: LdU64(0)
	12: Pop
	13: LdU64(1)
	14: Pop
	15: MoveLoc[1](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[1](trials#1#0: u64)
	19: Branch(2)
B4:
	20: Ret
}
entry public test_calibrate_vec_imm_borrow() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(18)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: ImmBorrowLoc[0](hash#1#0: vector<u8>)
	10: LdU64(0)
	11: VecImmBorrow(6)
	12: Pop
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(2)
B4:
	18: Ret
}
entry public test_calibrate_vec_imm_borrow__baseline() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(18)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: ImmBorrowLoc[0](hash#1#0: vector<u8>)
	10: Pop
	11: LdU64(0)
	12: Pop
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(2)
B4:
	18: Ret
}
entry public test_calibrate_vec_mut_borrow() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(18)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: MutBorrowLoc[0](hash#1#0: vector<u8>)
	10: LdU64(0)
	11: VecMutBorrow(6)
	12: Pop
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(2)
B4:
	18: Ret
}
entry public test_calibrate_vec_mut_borrow__baseline() {
L0:	hash#1#0: vector<u8>
L1:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[1](trials#1#0: u64)
B1:
	2: CopyLoc[1](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(18)
B2:
	6: Branch(7)
B3:
	7: LdConst[2](Vector(U8): [2, 1, 52])
	8: StLoc[0](hash#1#0: vector<u8>)
	9: MutBorrowLoc[0](hash#1#0: vector<u8>)
	10: Pop
	11: LdU64(0)
	12: Pop
	13: MoveLoc[1](trials#1#0: u64)
	14: LdU64(1)
	15: Sub
	16: StLoc[1](trials#1#0: u64)
	17: Branch(2)
B4:
	18: Ret
}
entry public test_calibrate_cast_u8() {
L0:	trials#1#0: u64
L1:	val#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU64(1)
	3: StLoc[1](val#1#0: u64)
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(21)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[1](val#1#0: u64)
	10: CastU8
	11: Pop
	12: MoveLoc[1](val#1#0: u64)
	13: LdU64(1)
	14: Mul
	15: StLoc[1](val#1#0: u64)
	16: MoveLoc[0](trials#1#0: u64)
	17: LdU64(1)
	18: Sub
	19: StLoc[0](trials#1#0: u64)
	20: Branch(4)
B4:
	21: Ret
}
entry public test_calibrate_cast_u8__baseline() {
L0:	trials#1#0: u64
L1:	val#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU64(1)
	3: StLoc[1](val#1#0: u64)
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[1](val#1#0: u64)
	10: Pop
	11: MoveLoc[1](val#1#0: u64)
	12: LdU64(1)
	13: Mul
	14: StLoc[1](val#1#0: u64)
	15: MoveLoc[0](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[0](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_cast_u64() {
L0:	trials#1#0: u64
L1:	val#1#0: u8
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU8(1)
	3: StLoc[1](val#1#0: u8)
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(21)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[1](val#1#0: u8)
	10: CastU64
	11: Pop
	12: MoveLoc[1](val#1#0: u8)
	13: LdU8(1)
	14: Mul
	15: StLoc[1](val#1#0: u8)
	16: MoveLoc[0](trials#1#0: u64)
	17: LdU64(1)
	18: Sub
	19: StLoc[0](trials#1#0: u64)
	20: Branch(4)
B4:
	21: Ret
}
entry public test_calibrate_cast_u64__baseline() {
L0:	trials#1#0: u64
L1:	val#1#0: u8
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU8(1)
	3: StLoc[1](val#1#0: u8)
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[1](val#1#0: u8)
	10: Pop
	11: MoveLoc[1](val#1#0: u8)
	12: LdU8(1)
	13: Mul
	14: StLoc[1](val#1#0: u8)
	15: MoveLoc[0](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[0](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_cast_u128() {
L0:	trials#1#0: u64
L1:	val#1#0: u8
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU8(1)
	3: StLoc[1](val#1#0: u8)
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(21)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[1](val#1#0: u8)
	10: CastU128
	11: Pop
	12: MoveLoc[1](val#1#0: u8)
	13: LdU8(1)
	14: Mul
	15: StLoc[1](val#1#0: u8)
	16: MoveLoc[0](trials#1#0: u64)
	17: LdU64(1)
	18: Sub
	19: StLoc[0](trials#1#0: u64)
	20: Branch(4)
B4:
	21: Ret
}
entry public test_calibrate_cast_u128__baseline() {
L0:	trials#1#0: u64
L1:	val#1#0: u8
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
	2: LdU8(1)
	3: StLoc[1](val#1#0: u8)
B1:
	4: CopyLoc[0](trials#1#0: u64)
	5: LdU64(0)
	6: Gt
	7: BrFalse(20)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[1](val#1#0: u8)
	10: Pop
	11: MoveLoc[1](val#1#0: u8)
	12: LdU8(1)
	13: Mul
	14: StLoc[1](val#1#0: u8)
	15: MoveLoc[0](trials#1#0: u64)
	16: LdU64(1)
	17: Sub
	18: StLoc[0](trials#1#0: u64)
	19: Branch(4)
B4:
	20: Ret
}
entry public test_calibrate_vec_unpack() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: LdConst[3](Vector(U8): [0])
	8: VecUnpack(6, 0)
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_vec_unpack__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: LdConst[3](Vector(U8): [0])
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
unit_test_poison() {
B0:
	0: LdU64(0)
	1: Call unit_test::create_signers_for_testing(u64): vector<signer>
	2: Pop
	3: Ret
}
}
