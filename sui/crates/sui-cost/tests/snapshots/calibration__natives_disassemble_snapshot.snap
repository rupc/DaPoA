---
source: crates/sui-cost/tests/calibration.rs
expression: natives_calib
---
// Move bytecode v6
module 2.natives_calibration_tests {
use 0000000000000000000000000000000000000000000000000000000000000001::unit_test;
use 0000000000000000000000000000000000000000000000000000000000000002::event;
use 0000000000000000000000000000000000000000000000000000000000000002::object;
use 0000000000000000000000000000000000000000000000000000000000000002::test_scenario;
use 0000000000000000000000000000000000000000000000000000000000000002::tx_context;


struct StructSimple has copy, drop, store {
	dummy_field: bool
}
struct ObjectWithID has store, key {
	id: UID
}

public calibrate_emit(obj#0#0: StructSimple) {
B0:
	0: MoveLoc[0](obj#0#0: StructSimple)
	1: Call event::emit<StructSimple>(StructSimple)
	2: Ret
}
public calibrate_emit_nop(obj#0#0: StructSimple) {
B0:
	0: MoveLoc[0](obj#0#0: StructSimple)
	1: Pop
	2: Ret
}
entry public test_calibrate_event_emit() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: Branch(7)
B3:
	7: LdFalse
	8: Pack[0](StructSimple)
	9: Call calibrate_emit(StructSimple)
	10: MoveLoc[0](trials#1#0: u64)
	11: LdU64(1)
	12: Sub
	13: StLoc[0](trials#1#0: u64)
	14: Branch(2)
B4:
	15: Ret
}
entry public test_calibrate_event_emit__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: Branch(7)
B3:
	7: LdFalse
	8: Pack[0](StructSimple)
	9: Call calibrate_emit_nop(StructSimple)
	10: MoveLoc[0](trials#1#0: u64)
	11: LdU64(1)
	12: Sub
	13: StLoc[0](trials#1#0: u64)
	14: Branch(2)
B4:
	15: Ret
}
entry public test_calibrate_id_address_from_bytes() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: LdConst[1](Vector(U8): [32, 50, 134, 111, 1, 9, 250, 27, 169, 17, 57, 45, 205, 45, 66, 96, 241, 216, 36, 49, 51, 22, 245, 70, 122, 191, 100, 24, 123, 62, 239, 165, 85])
	8: Call object::calibrate_address_from_bytes(vector<u8>)
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_id_address_from_bytes__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: LdConst[1](Vector(U8): [32, 50, 134, 111, 1, 9, 250, 27, 169, 17, 57, 45, 205, 45, 66, 96, 241, 216, 36, 49, 51, 22, 245, 70, 122, 191, 100, 24, 123, 62, 239, 165, 85])
	8: Call object::calibrate_address_from_bytes_nop(vector<u8>)
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_id_borrow_uid() {
L0:	obj#1#0: ObjectWithID
L1:	scenario#1#0: &mut Scenario
L2:	scenario_val#1#0: Scenario
L3:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[3](trials#1#0: u64)
	2: LdConst[2](Address: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
	3: Call test_scenario::begin(address): Scenario
	4: StLoc[2](scenario_val#1#0: Scenario)
	5: MutBorrowLoc[2](scenario_val#1#0: Scenario)
	6: StLoc[1](scenario#1#0: &mut Scenario)
B1:
	7: CopyLoc[3](trials#1#0: u64)
	8: LdU64(0)
	9: Gt
	10: BrFalse(27)
B2:
	11: Branch(12)
B3:
	12: CopyLoc[1](scenario#1#0: &mut Scenario)
	13: Call test_scenario::ctx(&mut Scenario): &mut TxContext
	14: Call object::new(&mut TxContext): UID
	15: Pack[1](ObjectWithID)
	16: StLoc[0](obj#1#0: ObjectWithID)
	17: ImmBorrowLoc[0](obj#1#0: ObjectWithID)
	18: Call object::calibrate_borrow_uid<ObjectWithID>(&ObjectWithID)
	19: MoveLoc[0](obj#1#0: ObjectWithID)
	20: Unpack[1](ObjectWithID)
	21: Call object::delete(UID)
	22: MoveLoc[3](trials#1#0: u64)
	23: LdU64(1)
	24: Sub
	25: StLoc[3](trials#1#0: u64)
	26: Branch(7)
B4:
	27: MoveLoc[1](scenario#1#0: &mut Scenario)
	28: Pop
	29: MoveLoc[2](scenario_val#1#0: Scenario)
	30: Call test_scenario::end(Scenario): TransactionEffects
	31: Pop
	32: Ret
}
entry public test_calibrate_id_borrow_uid__baseline() {
L0:	obj#1#0: ObjectWithID
L1:	scenario#1#0: &mut Scenario
L2:	scenario_val#1#0: Scenario
L3:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[3](trials#1#0: u64)
	2: LdConst[2](Address: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
	3: Call test_scenario::begin(address): Scenario
	4: StLoc[2](scenario_val#1#0: Scenario)
	5: MutBorrowLoc[2](scenario_val#1#0: Scenario)
	6: StLoc[1](scenario#1#0: &mut Scenario)
B1:
	7: CopyLoc[3](trials#1#0: u64)
	8: LdU64(0)
	9: Gt
	10: BrFalse(29)
B2:
	11: Branch(12)
B3:
	12: CopyLoc[1](scenario#1#0: &mut Scenario)
	13: Call test_scenario::ctx(&mut Scenario): &mut TxContext
	14: Call object::new(&mut TxContext): UID
	15: Pack[1](ObjectWithID)
	16: StLoc[0](obj#1#0: ObjectWithID)
	17: ImmBorrowLoc[0](obj#1#0: ObjectWithID)
	18: Call object::calibrate_borrow_uid<ObjectWithID>(&ObjectWithID)
	19: ImmBorrowLoc[0](obj#1#0: ObjectWithID)
	20: Pop
	21: MoveLoc[0](obj#1#0: ObjectWithID)
	22: Unpack[1](ObjectWithID)
	23: Call object::delete(UID)
	24: MoveLoc[3](trials#1#0: u64)
	25: LdU64(1)
	26: Sub
	27: StLoc[3](trials#1#0: u64)
	28: Branch(7)
B4:
	29: MoveLoc[1](scenario#1#0: &mut Scenario)
	30: Pop
	31: MoveLoc[2](scenario_val#1#0: Scenario)
	32: Call test_scenario::end(Scenario): TransactionEffects
	33: Pop
	34: Ret
}
entry public test_calibrate_tx_context_derive_id() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: Branch(7)
B3:
	7: LdConst[3](Vector(U8): [32, 58, 152, 93, 167, 79, 226, 37, 178, 4, 92, 23, 45, 107, 211, 144, 189, 133, 95, 8, 110, 62, 157, 82, 91, 70, 191, 226, 69, 17, 67, 21, 50])
	8: LdU64(0)
	9: Call tx_context::calibrate_derive_id(vector<u8>, u64)
	10: MoveLoc[0](trials#1#0: u64)
	11: LdU64(1)
	12: Sub
	13: StLoc[0](trials#1#0: u64)
	14: Branch(2)
B4:
	15: Ret
}
entry public test_calibrate_tx_context_derive_id__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(15)
B2:
	6: Branch(7)
B3:
	7: LdConst[3](Vector(U8): [32, 58, 152, 93, 167, 79, 226, 37, 178, 4, 92, 23, 45, 107, 211, 144, 189, 133, 95, 8, 110, 62, 157, 82, 91, 70, 191, 226, 69, 17, 67, 21, 50])
	8: LdU64(0)
	9: Call tx_context::calibrate_derive_id_nop(vector<u8>, u64)
	10: MoveLoc[0](trials#1#0: u64)
	11: LdU64(1)
	12: Sub
	13: StLoc[0](trials#1#0: u64)
	14: Branch(2)
B4:
	15: Ret
}
entry public test_calibrate_pop() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(14)
B2:
	6: Branch(7)
B3:
	7: LdFalse
	8: Pop
	9: MoveLoc[0](trials#1#0: u64)
	10: LdU64(1)
	11: Sub
	12: StLoc[0](trials#1#0: u64)
	13: Branch(2)
B4:
	14: Ret
}
entry public test_calibrate_pop__baseline() {
L0:	trials#1#0: u64
B0:
	0: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	1: StLoc[0](trials#1#0: u64)
B1:
	2: CopyLoc[0](trials#1#0: u64)
	3: LdU64(0)
	4: Gt
	5: BrFalse(12)
B2:
	6: Branch(7)
B3:
	7: MoveLoc[0](trials#1#0: u64)
	8: LdU64(1)
	9: Sub
	10: StLoc[0](trials#1#0: u64)
	11: Branch(2)
B4:
	12: Ret
}
unit_test_poison() {
B0:
	0: LdU64(0)
	1: Call unit_test::create_signers_for_testing(u64): vector<signer>
	2: Pop
	3: Ret
}
}
